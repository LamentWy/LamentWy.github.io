import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as s,b as n,d as l,e as a}from"./app-BwsoMA_K.js";const i={},u=a('<h1 id="rocketmq-源码分析-nameserver" tabindex="-1"><a class="header-anchor" href="#rocketmq-源码分析-nameserver"><span>RocketMQ 源码分析-NameServer</span></a></h1><div class="hint-container note"><p class="hint-container-title">注</p><p>NameSrv 比较简单，这是由它的设计决定的。 本文会以自顶向下的方式来介绍 NameSrv 的角色和功能。</p></div><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>RocketMQ 是一个分布式的消息队列，分布式系统自然需要一个模块来负责“路由管理”、“服务注册与发现”。 NameSrv (NameServer) 就是负责这部分的模块。</p>',4),r={href:"https://lament-z.com/docs/message-queue/rocketmq/send-msg.html",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>Broker 启动时会把自身注册到 NameSrv，如果是 NameSrv Cluster，那就注册到所有到 NameSrv 上。NameSrv 与 Broker 之间保持长连接，10秒检测一次 Broker 是否存活，当检测的 Broker 挂掉时则从自身的<strong>路由注册表</strong>中删除该 Broker。这部分就类似“服务注册发现”。</p><p>NameSrv 与常见的“服务注册发现”不太一样的地方是，它的各个节点之间并不会互相通信，就比如无论是 Eureka 还是 nacos ，他们是会相互同步信息最终数据一致的，但是 NameSrv 并不会，这是 RocketMQ 的特点之一，虽然可能会导致短暂的发送到各个 Broker 的消息不均匀，但这是可以接受的。</p><h2 id="namesrv-的基本组成介绍" tabindex="-1"><a class="header-anchor" href="#namesrv-的基本组成介绍"><span>Namesrv 的基本组成介绍</span></a></h2><p>Namesrv 本身是个基于 netty 的服务端。</p><p>NamesrvController 负责初始化 netty 服务器，以及启动各种定时任务。</p><p>processor 包里是各种事件的 Handler(netty 语境)。</p><p>BrokerHousekeepingService 这个说是 Service ，本质是个 ChannelEventListener，只不过他监听的 Channel 状态大部分与清理无效 Broker 相关。</p><p>RouteInfoManager 主要就是维护以下五个数据表：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code> private final HashMap&lt;String/* topic */, List&lt;QueueData&gt;&gt; topicQueueTable;
 private final HashMap&lt;String/* brokerName */, BrokerData&gt; brokerAddrTable;
 private final HashMap&lt;String/* clusterName */, Set&lt;String/* brokerName */&gt;&gt; clusterAddrTable;
 private final HashMap&lt;String/* brokerAddr */, BrokerLiveInfo&gt; brokerLiveTable;
 private final HashMap&lt;String/* brokerAddr */, List&lt;String&gt;/* Filter Server */&gt; filterServerTable;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，Broker / BrokerCluster / Topic 等信息都由 RouteInfoManager 进行管理。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>前文中提到由于 NameSrv 集群中，各个 NameSrv 之间并不会相互通信，因此会有短暂的路由信息不一致，从而导致消费发送存在少量的不均匀。</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>NameSrv 的<strong>路由注册表</strong>发生变化时并不会通知<strong>消息生产者</strong>(后简称P)，如果实际场景有要求，P 端需要在发送消息时提供容错来保证消息发送成功。</p></div><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析"><span>源码分析</span></a></h2><p>对 NameSrv 有了大体认识之后我们来挨个看细节。</p><h3 id="启动流程" tabindex="-1"><a class="header-anchor" href="#启动流程"><span>启动流程</span></a></h3><p>实际就是启动一个 NettyServer，大致流程为： <code>NamesrvStartup.class</code> 是启动类 -&gt; <code>main()</code> -&gt; <code>main0()</code> -&gt; 创建 <code>NamesrvController</code> 的对象，启动该对象.</p><p><code>main0()</code> 里会先创建一个 NamesrvController 的对象（其实就是自定义的 NettyServer）。 这个过程中会处理命令行参数/配置文件啥的，就把各种需要的参数/配置都准备好。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token comment">// main0</span>
  <span class="token class-name">NamesrvController</span> controller <span class="token operator">=</span> <span class="token function">createNamesrvController</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建好 controller 之后接下来就启动它，也就是 <code>start(controller);</code>。</p><p>这里会先执行 <code>controller.initialize()</code> 进行初始化工作，加载准备好的配置信息啦、创建 NettyServer 对象啦、创建线程池、启动定时任务等等，全部成功之后 <code> controller.start();</code> 才真正启动服务器。</p><h3 id="检测心跳" tabindex="-1"><a class="header-anchor" href="#检测心跳"><span>检测心跳</span></a></h3><p>每 10s 扫描一次 brokerLiveTable，如果发现过期的 broker，则删除。这个是<code>controller.initialize()</code>初始化时启动的定时任务之一。</p><p>brokerLiveTable 是前面说的 RouteInfoManager 管理数据表之一，数据结构为 HashMap ，Key 是 broker 的地址，Value 是 Broker 对应的信息。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerAddr */</span><span class="token punctuation">,</span> <span class="token class-name">BrokerLiveInfo</span><span class="token operator">&gt;</span> brokerLiveTable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每 10s 扫描一次 brokerLiveTable 的工作就是这里处理的，它单独起个线程 10 秒扫描一次（下方源码）。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// scheduledExecutorService</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadFactoryImpl</span><span class="token punctuation">(</span>
      <span class="token string">&quot;NSScheduledThread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 为了方便阅读 我这里改成了 lambda 表达式</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">NamesrvController</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>routeInfoManager<span class="token punctuation">.</span><span class="token function">scanNotActiveBroker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>broker 默认是 30s 向 NameSrv 发一次心跳包。<br> NameSrv 10 秒扫一次它维护的 brokerLiveTable。</p></div><p>扫描时对 Broker 进行判定，判断 broker 是否存活的逻辑：上次收到心跳包的时间 + 120s &lt; 系统当前时间。 翻译一下其实就是：2分钟没收到过 broker 发来的心跳包就认为这个 broker 挂了，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token comment">// last 来自 BrokerLiveInfo.lastUpdateTimestamp，aka，上次收到心跳包的时间</span>
  <span class="token comment">// BROKER_CHANNEL_EXPIRED_TIME = 120s，也就是 broker_Channel 过期时间</span>
  <span class="token punctuation">(</span>last <span class="token operator">+</span> <span class="token constant">BROKER_CHANNEL_EXPIRED_TIME</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后来看看他是如何删除 broker 信息的，<code>RouteInfoManager::scanNotActiveBroker</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token comment">// RouteInfoManager::scanNotActiveBroker</span>
  <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BrokerLiveInfo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerLiveTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BrokerLiveInfo</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">long</span> last <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLastUpdateTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>last <span class="token operator">+</span> <span class="token constant">BROKER_CHANNEL_EXPIRED_TIME</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 先尝试主动关闭 channel，内部逻辑就是 netty 的 closeChannel，添加了一个 listener 监控，成功关闭时打印 log</span>
        <span class="token comment">// 注意这里的 Channel 是 netty 定义的(io.netty.channel.Channel)，不是 Java NIO 那个</span>
          <span class="token class-name">RemotingUtil</span><span class="token punctuation">.</span><span class="token function">closeChannel</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从 brokerLiveTable 中删除过期 broker 信息</span>
          it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;The broker channel expired, {} {}ms&quot;</span><span class="token punctuation">,</span> next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">BROKER_CHANNEL_EXPIRED_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从方法命名看应该是 Channel 关闭后触发的方法</span>
        <span class="token comment">// 正常使用方式应该是通过 BrokerHousekeepingService 定义的监控去调用，</span>
        <span class="token comment">// 类似前面给 close 方法加个 Listener，监控关闭成功，然后打印关闭日志。</span>
        <span class="token comment">// 然鹅这里不知道为何就这么直接调用了，不过这条流程本来就写的很成问题，不必深究</span>
        <span class="token comment">// 这个方法是从 RouteInfoManager 维护的五个数据表里删除过期 broker 的对应信息。</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onChannelDestroy</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RouteInfoManager##onChannelDestroy</code>方法主要功能就是前面注释里说的从 RouteInfoManager 维护的五个数据表里删除过期 broker 的对应信息，这个方法正常的调用方式是通过 <code>BrokerHousekeepingService</code> 这个 ChannelEventListener 注册到 channel 的不同状态上去调用，比如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onChannelClose</span><span class="token punctuation">(</span><span class="token class-name">String</span> remoteAddr<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>namesrvController<span class="token punctuation">.</span><span class="token function">getRouteInfoManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onChannelDestroy</span><span class="token punctuation">(</span>remoteAddr<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而不应该像 <code>RouteInfoManager::scanNotActiveBroker</code> 里面那样直接调用，源码里也就这么一处是直接调用。 然后你自然会发现，这一处不规范导致多了一堆迷一样的判定，代码可读性迅速降低。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onChannelDestroy</span><span class="token punctuation">(</span><span class="token class-name">String</span> remoteAddr<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">String</span> brokerAddrFound <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>


      <span class="token comment">// 遍历 brokerLiveTable，根据 channel 找 brokerAddr</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 加读锁 这里的 this.lock 就是 JUC 提供的可重入读写锁 ReentrantReadWriteLock</span>
                  <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token comment">// 迭代器</span>
                  <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BrokerLiveInfo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> itBrokerLiveTable <span class="token operator">=</span>
                      <span class="token keyword">this</span><span class="token punctuation">.</span>brokerLiveTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token comment">// 开始遍历</span>
                  <span class="token keyword">while</span> <span class="token punctuation">(</span>itBrokerLiveTable<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BrokerLiveInfo</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> itBrokerLiveTable<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token comment">// 根据 channel 找对应的 brokerAddr 信息</span>
                      <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 把找到的 brokerAddr 存到 brokerAddrFound 后面要用</span>
                          brokerAddrFound <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token keyword">break</span><span class="token punctuation">;</span>
                      <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                  <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取消读锁</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;onChannelDestroy Exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 无法根据 channel 找到 brokerAddr 时，则直接使用 remoteAddr 参数</span>
      <span class="token comment">// remoteAddr 参数 就是要删除的 brokerAddr</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> brokerAddrFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          brokerAddrFound <span class="token operator">=</span> remoteAddr<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;the broker&#39;s channel destroyed, {}, clean it&#39;s data structure at once&quot;</span><span class="token punctuation">,</span> brokerAddrFound<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 从五个数据表 中删除 broker 的相关信息。</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>brokerAddrFound <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> brokerAddrFound<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

          <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">try</span> <span class="token punctuation">{</span>
                  <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写锁</span>
                  <span class="token comment">// 从 brokerLiveTable 中删除</span>
                  <span class="token keyword">this</span><span class="token punctuation">.</span>brokerLiveTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>brokerAddrFound<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token comment">// 从 filterServerTable 中删除</span>
                  <span class="token keyword">this</span><span class="token punctuation">.</span>filterServerTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>brokerAddrFound<span class="token punctuation">)</span><span class="token punctuation">;</span>

                  <span class="token class-name">String</span> brokerNameFound <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                  <span class="token keyword">boolean</span> removeBrokerName <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                  <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BrokerData</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> itBrokerAddrTable <span class="token operator">=</span>
                      <span class="token keyword">this</span><span class="token punctuation">.</span>brokerAddrTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                  <span class="token keyword">while</span> <span class="token punctuation">(</span>itBrokerAddrTable<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> brokerNameFound<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      <span class="token comment">// brokerData 里存的是 broker 主从集群的信息</span>
                      <span class="token class-name">BrokerData</span> brokerData <span class="token operator">=</span> itBrokerAddrTable<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token comment">// 主从集群的迭代器，Long 对应 brokerID, String 对应 brokerAddr</span>
                      <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> brokerData<span class="token punctuation">.</span><span class="token function">getBrokerAddrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                      <span class="token comment">// 从主从集群里删除无效 broker</span>
                      <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                          <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token class-name">Long</span> brokerId <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token class-name">String</span> brokerAddr <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token keyword">if</span> <span class="token punctuation">(</span>brokerAddr<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>brokerAddrFound<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                              brokerNameFound <span class="token operator">=</span> brokerData<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                              it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                              log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;remove brokerAddr[{}, {}] from brokerAddrTable, because channel destroyed&quot;</span><span class="token punctuation">,</span>
                                  brokerId<span class="token punctuation">,</span> brokerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                              <span class="token keyword">break</span><span class="token punctuation">;</span>
                          <span class="token punctuation">}</span>
                      <span class="token punctuation">}</span>

                      <span class="token keyword">if</span> <span class="token punctuation">(</span>brokerData<span class="token punctuation">.</span><span class="token function">getBrokerAddrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// broker 主从集群为空的话，设置 removeBrokerName 为 true，后面还要根据这个标记来判断是否要删除对应的 Topic</span>
                          removeBrokerName <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                          itBrokerAddrTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;remove brokerName[{}] from brokerAddrTable, because channel destroyed&quot;</span><span class="token punctuation">,</span>
                              brokerData<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span>

                  <span class="token comment">// 跟前面区别不大，这里是从 clusterAddrTable 中删除 cluster 以及这个 cluster 包含的 broker</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span>brokerNameFound <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> removeBrokerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clusterAddrTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                          <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token class-name">String</span> clusterName <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> brokerNames <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token keyword">boolean</span> removed <span class="token operator">=</span> brokerNames<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>brokerNameFound<span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token keyword">if</span> <span class="token punctuation">(</span>removed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                              log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;remove brokerName[{}], clusterName[{}] from clusterAddrTable, because channel destroyed&quot;</span><span class="token punctuation">,</span>
                                  brokerNameFound<span class="token punctuation">,</span> clusterName<span class="token punctuation">)</span><span class="token punctuation">;</span>

                              <span class="token keyword">if</span> <span class="token punctuation">(</span>brokerNames<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;remove the clusterName[{}] from clusterAddrTable, because channel destroyed and no broker in this cluster&quot;</span><span class="token punctuation">,</span>
                                      clusterName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                  it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                              <span class="token punctuation">}</span>

                              <span class="token keyword">break</span><span class="token punctuation">;</span>
                          <span class="token punctuation">}</span>
                      <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span>

                  <span class="token comment">// 从 topicQueueTable 中删除 对应的 topic</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span>removeBrokerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">QueueData</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> itTopicQueueTable <span class="token operator">=</span>
                          <span class="token keyword">this</span><span class="token punctuation">.</span>topicQueueTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token keyword">while</span> <span class="token punctuation">(</span>itTopicQueueTable<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                          <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">QueueData</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> itTopicQueueTable<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token class-name">String</span> topic <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QueueData</span><span class="token punctuation">&gt;</span></span> queueDataList <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                          <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QueueData</span><span class="token punctuation">&gt;</span></span> itQueueData <span class="token operator">=</span> queueDataList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token keyword">while</span> <span class="token punctuation">(</span>itQueueData<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                              <span class="token class-name">QueueData</span> queueData <span class="token operator">=</span> itQueueData<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                              <span class="token keyword">if</span> <span class="token punctuation">(</span>queueData<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>brokerNameFound<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                  itQueueData<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;remove topic[{} {}], from topicQueueTable, because channel destroyed&quot;</span><span class="token punctuation">,</span>
                                      topic<span class="token punctuation">,</span> queueData<span class="token punctuation">)</span><span class="token punctuation">;</span>
                              <span class="token punctuation">}</span>
                          <span class="token punctuation">}</span>

                          <span class="token keyword">if</span> <span class="token punctuation">(</span>queueDataList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                              itTopicQueueTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                              log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;remove topic[{}] all queue, from topicQueueTable, because channel destroyed&quot;</span><span class="token punctuation">,</span>
                                  topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token punctuation">}</span>
                      <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                  <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;onChannelDestroy Exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10分钟打印一次配置信息" tabindex="-1"><a class="header-anchor" href="#_10分钟打印一次配置信息"><span>10分钟打印一次配置信息</span></a></h3><p>就是打印 KVConfigManager 管理的配置信息。 略。</p><h3 id="routeinfomanager" tabindex="-1"><a class="header-anchor" href="#routeinfomanager"><span>RouteInfoManager</span></a></h3><p>Namesrv 承担着类似服务发现/路由的功能，RouteInfoManager 这个类就可以看作是路由功能的实现。</p><h4 id="五个数据表介绍" tabindex="-1"><a class="header-anchor" href="#五个数据表介绍"><span>五个数据表介绍</span></a></h4><p>前面说了，它维护了五个数据表：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code> private final HashMap&lt;String/* topic */, List&lt;QueueData&gt;&gt; topicQueueTable;
 private final HashMap&lt;String/* brokerName */, BrokerData&gt; brokerAddrTable;
 private final HashMap&lt;String/* clusterName */, Set&lt;String/* brokerName */&gt;&gt; clusterAddrTable;
 private final HashMap&lt;String/* brokerAddr */, BrokerLiveInfo&gt; brokerLiveTable;
 private final HashMap&lt;String/* brokerAddr */, List&lt;String&gt;/* Filter Server */&gt; filterServerTable;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>简单了解一下 RocketMQ 的基本概念，可以帮助理解 RouteInfoManager 维护了些什么东西</p><p>RocketMQ 主要基于订阅/发布机制，一个 topic 可以拥有多个 Queue，一个 Broker 默认情况下会为每个 topic 创建 4个 readQueue 和 4个 writeQueue。</p><p>多个 brokerName 相同的 broker 可以组成一个主从集群，这个主从集群的集群名存储在 cluster 中。 主从 broker 之间通过 brokerID 进行区分，一个 broker 的 brokerID = 0l，则为主节点；brokerID &gt; 0l 时为从节点。</p></div><p>接下来分别看一下这五个数据表。</p><h4 id="topicqueuetable" tabindex="-1"><a class="header-anchor" href="#topicqueuetable"><span>topicQueueTable</span></a></h4><p><code>private final HashMap&lt;String/* topic */, List&lt;QueueData&gt;&gt; topicQueueTable;</code></p><p>这个数据表里存储的是每个 topic 和自身所对应的 broker + queue 的信息列表。 换句话说这个是 topic 的路由表，发送消息时会根据这个表进行负载均衡。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// QueueData</span>
 <span class="token keyword">private</span> <span class="token class-name">String</span> brokerName<span class="token punctuation">;</span>
 <span class="token keyword">private</span> <span class="token keyword">int</span> readQueueNums<span class="token punctuation">;</span>
 <span class="token keyword">private</span> <span class="token keyword">int</span> writeQueueNums<span class="token punctuation">;</span>
 <span class="token keyword">private</span> <span class="token keyword">int</span> perm<span class="token punctuation">;</span> <span class="token comment">// 读写权限</span>
 <span class="token keyword">private</span> <span class="token keyword">int</span> topicSysFlag<span class="token punctuation">;</span> <span class="token comment">// topic 同步标记</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>brokerAddrTable</p><p><code>private final HashMap&lt;String/* brokerName */, BrokerData&gt; brokerAddrTable;</code></p><p>这个里面存的是 BrokerName 和它对应的 broker 主从集群信息。<br> 如果一个 broker 的 brokerId 为 0L，那它就是主broker。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// BrokerData</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> cluster<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> brokerName<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">Long</span><span class="token comment">/* brokerId */</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token comment">/* broker address */</span><span class="token operator">&gt;</span> brokerAddrs<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>clusterAddrTable</p><p><code>private final HashMap&lt;String/* clusterName */, Set&lt;String/* brokerName */&gt;&gt; clusterAddrTable;</code></p><p>这个就是集群路由表，clusterName 和属于该集群的所有 broker 的 brokerName 集合一一映射。</p></li><li><p>brokerLiveTable</p><p><code>private final HashMap&lt;String/* brokerAddr */, BrokerLiveInfo&gt; brokerLiveTable;</code></p><p>brokerAddr 和其对应的存活信息（BrokerLiveInfo）。<br> 每次 Namesrv 收到 broker 发来的心跳包后都会根据 brokerAddr 来更新对应的 BrokerLiveInfo。</p></li><li><p>filterServerTable<br><code>private final HashMap&lt;String/* brokerAddr */, List&lt;String&gt;/* Filter Server */&gt; filterServerTable;</code></p><p>这个是 brokerAddr 与 FilterServer列表的对应关系。</p></li></ul><h3 id="注册-更新-broker-信息" tabindex="-1"><a class="header-anchor" href="#注册-更新-broker-信息"><span>注册/更新 Broker 信息</span></a></h3><p>Broker 每隔30秒向 Namesrv 集群发送一次心跳包（启动时也会发送一次），Namesrv 收到心跳包后会去更新对应的 BrokerLiveInfo，具体的说是更新上一次收到该 broker 发来心跳包的时间戳(<code>BrokerLiveInfo.lastUpdateTimestamp</code>)。 同时 Namesrv 会每隔10秒扫描一次整个 brokerLiveTable，如果任意 broker 的 lastUpdateTimestamp 超过120秒没有更新过则从所有数据表中删除该 Broker 的信息，同时关闭 Channel (Netty语境)，或者说是关闭 Socket 连接。</p><ul><li><p>Broker 发送心跳包</p><p>这部分源码分析放到 Broker 章节，其实这部分如果熟悉 Netty 的话就挺简单的，就是发个请求，不熟悉的话最好先看看 Netty。</p></li><li><p>Namesrv 处理心跳包</p><p>由于 RocketMQ 是基于 Netty 来进行网络通信的，而对于 Netty 来说，所有的“请求”都是 Socket 传入的数据包。因此要区分不同“请求”，通常的做法是发送数据的时候额外携带“请求类型”， 通过 Decoder 解码数据后再判定是什么类型的&quot;请求&quot;。</p><p>客户端发送请求时候将请求类型+请求参数一起通过编码器（Encoder）编码为 byte 数组（或者理解为二进制数据，就像 Redis 那样，这样当 NettyServer 收到数据包时，先通过解码器(Decoder)解码为 Java 对象，然后就可以判断请求类型了。</p><p>这个过程也是通讯协议从设计到实践的过程，有兴趣可以在自己的 netty demo 里面先自定义一个协议，然后手动实践一下。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>这里提到的 Encoder/Decoder 以及后续判断请求类型这些在 Netty 语境都是不同的 handler。</p></div><p>RocketMQ 的习惯是把 handler 都放在 processor 包下面，所以有了上面的基础知识我们就知道去哪里找 Namesrv 处理心跳包的逻辑了。</p><p><code>org.apache.rocketmq.namesrv.processor.DefaultRequestProcessor</code>就是我们要找的类。</p><p>这个类也简单，可以先大概浏览一遍，就是<code>processRequest()</code>方法里面通过<code> switch (request.getCode())</code>来判断请求类型，然后根据请求类型转发给后续处理方法。</p><p><code>org.apache.rocketmq.common.protocol.RequestCode</code>里面定义了所有的请求类型CODE。 我们这里要关注的是 Broker 发来的注册请求，所以你搜 BROKER 或者 REGISTER 就可以了。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">REGISTER_BROKER</span><span class="token operator">:</span>
     <span class="token class-name">Version</span> brokerVersion <span class="token operator">=</span> <span class="token class-name">MQVersion</span><span class="token punctuation">.</span><span class="token function">value2Version</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>brokerVersion<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token class-name">MQVersion<span class="token punctuation">.</span>Version</span><span class="token punctuation">.</span><span class="token constant">V3_0_11</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBrokerWithFilterServer</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBroker</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到它提供了两个注册方法，一个是带 FilterServer 模式的，一个是普通的注册。 这里只分析<code>this.registerBroker(ctx, request);</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token comment">// 首先这里的入参不用管，就是 netty 中典型的 handler 方法，看过 netty 自然秒懂</span>
<span class="token keyword">public</span> <span class="token class-name">RemotingCommand</span> <span class="token function">registerBroker</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span>
    <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemotingCommandException</span> <span class="token punctuation">{</span>

    <span class="token comment">// 从这里开始跳过 都是 netty 构造数据包的内容</span>
    <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> response <span class="token operator">=</span> <span class="token class-name">RemotingCommand</span><span class="token punctuation">.</span><span class="token function">createResponseCommand</span><span class="token punctuation">(</span><span class="token class-name">RegisterBrokerResponseHeader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">RegisterBrokerResponseHeader</span> responseHeader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RegisterBrokerResponseHeader</span><span class="token punctuation">)</span> response<span class="token punctuation">.</span><span class="token function">readCustomHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">RegisterBrokerRequestHeader</span> requestHeader <span class="token operator">=</span>
        <span class="token punctuation">(</span><span class="token class-name">RegisterBrokerRequestHeader</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">decodeCommandCustomHeader</span><span class="token punctuation">(</span><span class="token class-name">RegisterBrokerRequestHeader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checksum</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setRemark</span><span class="token punctuation">(</span><span class="token string">&quot;crc32 not match&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">TopicConfigSerializeWrapper</span> topicConfigWrapper<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        topicConfigWrapper <span class="token operator">=</span> <span class="token class-name">TopicConfigSerializeWrapper</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TopicConfigSerializeWrapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        topicConfigWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopicConfigSerializeWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        topicConfigWrapper<span class="token punctuation">.</span><span class="token function">getDataVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        topicConfigWrapper<span class="token punctuation">.</span><span class="token function">getDataVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 以上都不用看，编码解码校验请求，不懂的先去看 Netty</span>

    <span class="token class-name">RegisterBrokerResult</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>namesrvController<span class="token punctuation">.</span><span class="token function">getRouteInfoManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerBroker</span><span class="token punctuation">(</span>
        requestHeader<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        requestHeader<span class="token punctuation">.</span><span class="token function">getBrokerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        requestHeader<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        requestHeader<span class="token punctuation">.</span><span class="token function">getBrokerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        requestHeader<span class="token punctuation">.</span><span class="token function">getHaServerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        topicConfigWrapper<span class="token punctuation">,</span>
        <span class="token keyword">null</span><span class="token punctuation">,</span>
        ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里开始往后也不用看，就是构造 response 的数据包</span>
    responseHeader<span class="token punctuation">.</span><span class="token function">setHaServerAddr</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getHaServerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    responseHeader<span class="token punctuation">.</span><span class="token function">setMasterAddr</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getMasterAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> jsonValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>namesrvController<span class="token punctuation">.</span><span class="token function">getKvConfigManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKVListByNamespace</span><span class="token punctuation">(</span><span class="token class-name">NamesrvUtil</span><span class="token punctuation">.</span><span class="token constant">NAMESPACE_ORDER_TOPIC_CONFIG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>jsonValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setRemark</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以你看<code>DefaultRequestProcessor</code>就是转发了一下注册请求，真正处理注册逻辑的是<code>RouteInfoManager::registerBroker</code>。 下面来看这部分代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">RegisterBrokerResult</span> <span class="token function">registerBroker</span><span class="token punctuation">(</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> clusterName<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> brokerAddr<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> brokerName<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token keyword">long</span> brokerId<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> haServerAddr<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">TopicConfigSerializeWrapper</span> topicConfigWrapper<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> filterServerList<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RegisterBrokerResult</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegisterBrokerResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token comment">// RouteInfoManager 中维护的五个数据表都是 HashMap</span>
          <span class="token comment">// 并且通过前面的代码我们知道会有一个线程定期扫描并剔除无效 broker，五个表都有涉及。</span>
          <span class="token comment">// 所以修改前一定要加锁防止并发问题</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment">// --------------  处理 clusterAddrTable ---------------------</span>
            <span class="token comment">// 先判断 发送请求的 Broker 所属集群是否存在，如果不存在就添加集群</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> brokerNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clusterAddrTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clusterName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> brokerNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                brokerNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>clusterAddrTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>clusterName<span class="token punctuation">,</span> brokerNames<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            brokerNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>brokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment">// --------------  clusterAddrTable 完成 --------------------</span>


          <span class="token comment">// -------------------- 处理 brokerAddrTable --------------------</span>

            <span class="token keyword">boolean</span> registerFirst <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token comment">// 先确认 brokerName 对应的 brokerData 是否存在，如果不存在则创建。</span>
            <span class="token class-name">BrokerData</span> brokerData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerAddrTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>brokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> brokerData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// 这里标记为首次注册，因为当 brokerAddrTable 里连 BrokerData 都没有，说明这个主从集群里一台 broker 都没有</span>
                registerFirst <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
                brokerData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrokerData</span><span class="token punctuation">(</span>clusterName<span class="token punctuation">,</span> brokerName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>brokerAddrTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>brokerName<span class="token punctuation">,</span> brokerData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> brokerAddrsMap <span class="token operator">=</span> brokerData<span class="token punctuation">.</span><span class="token function">getBrokerAddrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">/*
            注册过程中，如果发起注册请求的 broker 是已经存在于 brokerAddrTable 的 slave broker,
            但是请求参数 brokerID 为0的话，会发生主从交换。
            实际上交换不太准确，类似晋升，因为这时候 master 已经挂了，slave broker 现在作为 master 来重新注册而已。
            因此处理逻辑只需要先删除掉原来的 slave broker 信息，然后重走一次注册流程即可。
            */</span>
            <span class="token comment">//Switch slave to master: first remove &lt;1, IP:PORT&gt; in namesrv, then add &lt;0, IP:PORT&gt;</span>
            <span class="token comment">//The same IP:PORT must only have one record in brokerAddrTable</span>
            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> brokerAddrsMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> item <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> brokerAddr <span class="token operator">&amp;&amp;</span> brokerAddr<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> brokerId <span class="token operator">!=</span> item<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 再次判断是否为首次注册</span>
            <span class="token class-name">String</span> oldAddr <span class="token operator">=</span> brokerData<span class="token punctuation">.</span><span class="token function">getBrokerAddrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>brokerId<span class="token punctuation">,</span> brokerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// oldAddr == null 就回到了前面第一次标记的情况</span>
            <span class="token comment">// oldAddr != null 那说明有新的 broker 代替了该 brokerID 对应的旧 broker，这是第二种首次注册的情况</span>
            registerFirst <span class="token operator">=</span> registerFirst <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> oldAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Broker 为 主节点，并且该 Broker 对应的 topicConfig 信息发生变化(包括首次注册)</span>
            <span class="token comment">// 这个情况下，需要创建/更新该 Broker 对应的 Topic 信息。</span>
            <span class="token comment">// 说白了就是维护 topicQueueTable 中与该 Broker 相关的信息。</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> topicConfigWrapper
                <span class="token operator">&amp;&amp;</span> <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MASTER_ID</span> <span class="token operator">==</span> brokerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isBrokerTopicConfigChanged</span><span class="token punctuation">(</span>brokerAddr<span class="token punctuation">,</span> topicConfigWrapper<span class="token punctuation">.</span><span class="token function">getDataVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> registerFirst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TopicConfig</span><span class="token punctuation">&gt;</span></span> tcTable <span class="token operator">=</span>
                        topicConfigWrapper<span class="token punctuation">.</span><span class="token function">getTopicConfigTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tcTable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TopicConfig</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> tcTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                          <span class="token comment">// 这个方法就不详细展开了，其内容就是</span>
                          <span class="token comment">// 1. 利用 brokerName 和 topicConfig（aka entry.getValue()）来组装 queueData</span>
                          <span class="token comment">// 2. topicQueueTable 利用 topicConfig.getTopicName() 来判断该 topic 的信息是否存在</span>
                          <span class="token comment">// 3. 不存在就把这个 topic 注册进来，存在就更新  </span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createAndUpdateQueueData</span><span class="token punctuation">(</span>brokerName<span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 这里就是之前心跳包时候说的，更新 brokerLiveTable</span>
            <span class="token class-name">BrokerLiveInfo</span> prevBrokerLiveInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerLiveTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>brokerAddr<span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">BrokerLiveInfo</span><span class="token punctuation">(</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    topicConfigWrapper<span class="token punctuation">.</span><span class="token function">getDataVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    channel<span class="token punctuation">,</span>
                    haServerAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> prevBrokerLiveInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 首次注册</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;new broker registered, {} HAServer: {}&quot;</span><span class="token punctuation">,</span> brokerAddr<span class="token punctuation">,</span> haServerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// filterServer 模式</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>filterServerList <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>filterServerList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>filterServerTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>brokerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>filterServerTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>brokerAddr<span class="token punctuation">,</span> filterServerList<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MASTER_ID</span> <span class="token operator">!=</span> brokerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> masterAddr <span class="token operator">=</span> brokerData<span class="token punctuation">.</span><span class="token function">getBrokerAddrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MASTER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>masterAddr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">BrokerLiveInfo</span> brokerLiveInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerLiveTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>masterAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>brokerLiveInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        result<span class="token punctuation">.</span><span class="token function">setHaServerAddr</span><span class="token punctuation">(</span>brokerLiveInfo<span class="token punctuation">.</span><span class="token function">getHaServerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        result<span class="token punctuation">.</span><span class="token function">setMasterAddr</span><span class="token punctuation">(</span>masterAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;registerBroker Exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="注销-删除-broker-信息" tabindex="-1"><a class="header-anchor" href="#注销-删除-broker-信息"><span>注销/删除 Broker 信息</span></a></h3><p>Namesrv 注销 broker 分两种情况：</p><ol><li><p>120秒没收到 broker 发来的心跳包，自动删除，这个前面分析过了。</p></li><li><p>Broker 正常关闭时会给 Namesrv 发出注销请求（unregisterBroker）。</p></li></ol><pre><code>有兴趣的话可以按照之前分析 broker 注册的思路在 Namesrv 的代码中找到如下方法自行分析。
</code></pre><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>public RemotingCommand unregisterBroker(ChannelHandlerContext ctx, RemotingCommand request)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两种情况下，Namesrv 的处理逻辑是一致的，都是从<code>RouteInfoManager</code> 维护的数据表中删除/更新与该 broker 相关的信息， 唯一的区别就是 broker 正常注销的话，Namesrv 不会主动关闭 channel，因为他要给 Broker 返回注销成功的 response。</p>`,58);function d(v,m){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("前文("),s("a",r,[n("发送消息"),l(t)]),n(") 中提到了 Client 发送消息时会去 Namesrv 拉数据(updateTopicRouteInfoFromNameServer)， 确认发给哪个 Broker 的哪个 Queue。这部分就类似路由功能。")]),k])}const f=e(i,[["render",d],["__file","namesrv.html.vue"]]),y=JSON.parse('{"path":"/docs/message-queue/rocketmq/namesrv.html","title":"RocketMQ 源码分析-NameSrv","lang":"zh-CN","frontmatter":{"title":"RocketMQ 源码分析-NameSrv","order":3,"description":"RocketMQ 源码分析-NameServer 注 NameSrv 比较简单，这是由它的设计决定的。 本文会以自顶向下的方式来介绍 NameSrv 的角色和功能。 概述 RocketMQ 是一个分布式的消息队列，分布式系统自然需要一个模块来负责“路由管理”、“服务注册与发现”。 NameSrv (NameServer) 就是负责这部分的模块。 前文(...","head":[["meta",{"property":"og:url","content":"https://lament-z.com/docs/message-queue/rocketmq/namesrv.html"}],["meta",{"property":"og:site_name","content":"鲸鱼气球"}],["meta",{"property":"og:title","content":"RocketMQ 源码分析-NameSrv"}],["meta",{"property":"og:description","content":"RocketMQ 源码分析-NameServer 注 NameSrv 比较简单，这是由它的设计决定的。 本文会以自顶向下的方式来介绍 NameSrv 的角色和功能。 概述 RocketMQ 是一个分布式的消息队列，分布式系统自然需要一个模块来负责“路由管理”、“服务注册与发现”。 NameSrv (NameServer) 就是负责这部分的模块。 前文(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-18T09:19:03.000Z"}],["meta",{"property":"article:author","content":"lament-z"}],["meta",{"property":"article:modified_time","content":"2024-02-18T09:19:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RocketMQ 源码分析-NameSrv\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-18T09:19:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lament-z\\",\\"url\\":\\"https://lament-z.com\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"Namesrv 的基本组成介绍","slug":"namesrv-的基本组成介绍","link":"#namesrv-的基本组成介绍","children":[]},{"level":2,"title":"源码分析","slug":"源码分析","link":"#源码分析","children":[{"level":3,"title":"启动流程","slug":"启动流程","link":"#启动流程","children":[]},{"level":3,"title":"检测心跳","slug":"检测心跳","link":"#检测心跳","children":[]},{"level":3,"title":"10分钟打印一次配置信息","slug":"_10分钟打印一次配置信息","link":"#_10分钟打印一次配置信息","children":[]},{"level":3,"title":"RouteInfoManager","slug":"routeinfomanager","link":"#routeinfomanager","children":[]},{"level":3,"title":"注册/更新 Broker 信息","slug":"注册-更新-broker-信息","link":"#注册-更新-broker-信息","children":[]},{"level":3,"title":"注销/删除 Broker 信息","slug":"注销-删除-broker-信息","link":"#注销-删除-broker-信息","children":[]}]}],"git":{"createdTime":1708152167000,"updatedTime":1708247943000,"contributors":[{"name":"Lament","email":"lament.wy@gmail.com","commits":2}]},"readingTime":{"minutes":14.47,"words":4340},"filePathRelative":"docs/message-queue/rocketmq/namesrv.md","localizedDate":"2024年2月17日","autoDesc":true,"excerpt":"\\n<div class=\\"hint-container note\\">\\n<p class=\\"hint-container-title\\">注</p>\\n<p>NameSrv 比较简单，这是由它的设计决定的。\\n本文会以自顶向下的方式来介绍 NameSrv 的角色和功能。</p>\\n</div>\\n<h2>概述</h2>\\n<p>RocketMQ 是一个分布式的消息队列，分布式系统自然需要一个模块来负责“路由管理”、“服务注册与发现”。\\nNameSrv (NameServer) 就是负责这部分的模块。</p>\\n<p>前文(<a href=\\"https://lament-z.com/docs/message-queue/rocketmq/send-msg.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">发送消息</a>)\\n中提到了 Client 发送消息时会去 Namesrv 拉数据(updateTopicRouteInfoFromNameServer)，\\n确认发给哪个 Broker 的哪个 Queue。这部分就类似路由功能。</p>"}');export{f as comp,y as data};
