import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-BwsoMA_K.js";const e={},p=t(`<h1 id="rocketmq-源码分析-发送消息" tabindex="-1"><a class="header-anchor" href="#rocketmq-源码分析-发送消息"><span>RocketMQ 源码分析-发送消息</span></a></h1><p>这里开始详细聊聊 RocketMQ 发送消息的各种细节。</p><p>前面在简介里面说了，从使用者的角度，Producer 看起来就是直接往 Topic 里面塞消息。而实际上呢，要先去 Namesrv 找到 Topic 的路由信息，然后才能确定 Topic 是由哪个 Broker 管理。</p><p>发送消息支持三种方式，同步、异步、单向，区别很简单不再赘述，下文以同步为例进行分析。</p><h2 id="前置要求" tabindex="-1"><a class="header-anchor" href="#前置要求"><span>前置要求</span></a></h2><p>这里就假设读者已经顺利完成了 quick start 中的内容，收发消息已经全部成功。</p><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析"><span>源码分析</span></a></h2><p>整个过程以描述+代码注释的方式进行。</p><h3 id="从发送消息开始" tabindex="-1"><a class="header-anchor" href="#从发送消息开始"><span>从发送消息开始</span></a></h3><p>下面贴了一段简单的发送消息的代码，逻辑很简单，先创建并启动 <code>producer</code>， 然后发送消息。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 创建 Producer</span>
<span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;ProducerGroupName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动 - 这是个 netty client</span>

       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
           <span class="token keyword">try</span> <span class="token punctuation">{</span>
               <span class="token punctuation">{</span>  <span class="token comment">// 构造消息</span>
                   <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;TopicTest&quot;</span><span class="token punctuation">,</span>
                       <span class="token string">&quot;TagA&quot;</span><span class="token punctuation">,</span>
                       <span class="token string">&quot;OrderID188&quot;</span><span class="token punctuation">,</span>
                       <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CHARSET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                   <span class="token comment">// 发送消息，这里是以同步的方式拿到返回结果。</span>
                   <span class="token comment">// 异步则是通过 callback</span>
                   <span class="token comment">// 单向则不关心结果</span>
                   <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>

                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n&quot;</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>

           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>

       producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确实非常简单对吧，接下来进入 <code>producer.start();</code> 方法。</p><h3 id="producer-start" tabindex="-1"><a class="header-anchor" href="#producer-start"><span>producer.start()</span></a></h3><p><code>producer</code> 是 <code>DefaultMQProducer</code> 的实例，于是我们来看 <code>DefaultMQProducer</code> 是啥。</p><h4 id="defaultmqproducer" tabindex="-1"><a class="header-anchor" href="#defaultmqproducer"><span>DefaultMQProducer</span></a></h4><p>分析一个类就跟我们自己写一个类的流程差不多，先看他的属性和构造方法，然后再去看他的功能，也就是提供了哪些方法。</p><ul><li><p>属性</p><p>源码中这部分是有注释的，可以先自己过一遍源码。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>   <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">transient</span> <span class="token class-name">DefaultMQProducerImpl</span> defaultMQProducerImpl<span class="token punctuation">;</span>

   <span class="token comment">// 重试的响应码</span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> retryResponseCodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
           <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">TOPIC_NOT_EXIST</span><span class="token punctuation">,</span>
           <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SERVICE_NOT_AVAILABLE</span><span class="token punctuation">,</span>
           <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">,</span>
           <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">NO_PERMISSION</span><span class="token punctuation">,</span>
           <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">NO_BUYER_ID</span><span class="token punctuation">,</span>
           <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">NOT_IN_CURRENT_UNIT</span>
   <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 生产者组，这个概念后面细说</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> producerGroup<span class="token punctuation">;</span>

   <span class="token comment">// 这就是自动创建主题机制的那个 Topic</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> createTopicKey <span class="token operator">=</span> <span class="token class-name">TopicValidator</span><span class="token punctuation">.</span><span class="token constant">AUTO_CREATE_TOPIC_KEY_TOPIC</span><span class="token punctuation">;</span>

   <span class="token comment">// 前面 Namesrv 里提过，一个 Broker 默认情况下会为每个 topic 创建 4个 readQueue 和 4个 writeQueue。  </span>
   <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> defaultTopicQueueNums <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

   <span class="token keyword">private</span> <span class="token keyword">int</span> sendMsgTimeout <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>

   <span class="token comment">// 这个是压缩消息的阈值，Message.body 的大小超过 4k 就进行压缩</span>
   <span class="token keyword">private</span> <span class="token keyword">int</span> compressMsgBodyOverHowmuch <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>

   <span class="token comment">// 发送消息失败会重试两次（总共最多发3次） 后面细说</span>
   <span class="token keyword">private</span> <span class="token keyword">int</span> retryTimesWhenSendFailed <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

   <span class="token comment">// 这是发送异步消息失败也是重试两次</span>
   <span class="token comment">// 源码注释里写了，这里也先提一下，异步消息失败的重试机制可能会造成消息重复发送。</span>
   <span class="token keyword">private</span> <span class="token keyword">int</span> retryTimesWhenSendAsyncFailed <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

   <span class="token comment">// 这个是消息发送失败时，是否切换另外的 broker</span>
   <span class="token keyword">private</span> <span class="token keyword">boolean</span> retryAnotherBrokerWhenNotStoreOK <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

   <span class="token comment">// 消息大小的上限 aka 4M</span>
   <span class="token keyword">private</span> <span class="token keyword">int</span> maxMessageSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>

   <span class="token comment">// 这个先无视</span>
   <span class="token keyword">private</span> <span class="token class-name">TraceDispatcher</span> traceDispatcher <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造方法</p><p>数了一下...有10个构造方法，就不全贴出来了，只看这一个就行。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> namespace<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> producerGroup<span class="token punctuation">,</span> <span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">=</span> namespace<span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>producerGroup <span class="token operator">=</span> producerGroup<span class="token punctuation">;</span>
     defaultMQProducerImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducerImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出来 <code>DefaultMQProducer</code> 其实就是对 <code>DefaultMQProducerImpl</code> 做了一层包装，他的其他方法就不列出来了，可以自己观察一下，这里我们直接去看 <code>DefaultMQProducer::start()</code>。</p></li></ul><h4 id="defaultmqproducer-start" tabindex="-1"><a class="header-anchor" href="#defaultmqproducer-start"><span>DefaultMQProducer::start()</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// DefaultMQProducer::start()</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setProducerGroup</span><span class="token punctuation">(</span><span class="token function">withNamespace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>producerGroup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 实际实现启动的是 DefaultMQProducerImpl 类</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducerImpl<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> traceDispatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
              traceDispatcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNamesrvAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAccessChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;trace dispatcher start failed &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来进入 <code>DefaultMQProducerImpl::start()</code>。</p><h4 id="defaultmqproducerimpl-start" tabindex="-1"><a class="header-anchor" href="#defaultmqproducerimpl-start"><span>DefaultMQProducerImpl::start()</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> startFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 起手就是个 switch</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serviceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// serviceState 属性默认是 CREATE_JUST</span>
            <span class="token comment">// 而无论是 DefaultMQProducerImpl 或者 DefaultMQProducer 的构造方法中都没有修改该属性的操作，所以我们的 producer.start() 肯定会进入 CREATE_JUST 分支。</span>
            <span class="token keyword">case</span> <span class="token constant">CREATE_JUST</span><span class="token operator">:</span>
                <span class="token comment">// 进来之后直接先标记为 “启动失败” 的状态。</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>serviceState <span class="token operator">=</span> <span class="token class-name">ServiceState</span><span class="token punctuation">.</span><span class="token constant">START_FAILED</span><span class="token punctuation">;</span>

                <span class="token comment">/* --- 校验开始 --- */</span>

                <span class="token comment">// 然后开始检查配置，实际就是检查 producerGroup 是否存在，是不是默认的 &quot;DEFAULT_PRODUCER&quot; ，不符合要求就抛个异常提醒用户修改。</span>
                <span class="token comment">// 比如 new DefaultMQProducer();时没有自定义 producerGroup 时，rocketmq 会默认你的 producerGroup 为 “DEFAULT_PRODUCER”， 之后代码运行到这里就抛异常了</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 这段判定的作用跟上面的 this.checkConfig(); 其实差不多，也是提醒你要自定义 producerGroup。</span>
                <span class="token comment">// 只要 ProducerGroup 不等于 &quot;CLIENT_INNER_PRODUCER&quot;  </span>
                <span class="token comment">// 这个默认值是走 MQClientInstance 初始化 producer 用的。</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">CLIENT_INNER_PRODUCER_GROUP</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 这里要做的事情就是 如果 InstanceName 为 &quot;DEFAULT&quot; 就改成 Pid#TimeStamp 的形式。</span>
                    <span class="token comment">// 目的是为了区分不同的 producer 实例</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">changeInstanceNameToPID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">/* --- 校验结束 --- */</span>

                <span class="token doc-comment comment">/**
                   创建 MQ客户端的实例，这里简单说一下 MQClientInstance 是个啥，本质上就是 netty 客户端 + RocketMQ 自身的需求实现。
                   注意这里说的客户端/client 的概念是不区分 Consumer 和 Producer ，这两种角色都看作客户端。
                   MQClientManager ，他里面维护了一个 clientID 和 MQClientInstance 一一对应的 kv 结构，这里为了满足并发的需要用的是 ConcurrentHashMap。
                */</span>

                <span class="token comment">/*
                  然后我们来看代码， MQClientManager.getInstance() 返回的是 MQClientManager 的
                  getOrCreateMQClientInstance() 返回的是 MQClientInstance 。
                  也就是前面说的 netty 客户端。
                  getOrCreateMQClientInstance 方法的逻辑是 key(clientId) 对应的 value(MQClientInstance) 存在则直接返回，不存在则创建后返回。
                */</span>
                <span class="token comment">// 创建 instance</span>
                <span class="token comment">// 无视掉 mQClientFactory 这个变量名，就是个 instance.</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory <span class="token operator">=</span> <span class="token class-name">MQClientManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreateMQClientInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">,</span> rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">/*
                 MQClientInstance 创建好了，但是 Instance 的角色还不明确，前面说了，它可以是生产者也可以是消费者，这里 registerProducer 就是给 MQClientInstance 明确身份
                 registerProducer() 方法就是把刚创建的这个 MQClientInstance 注册到其内部维护的 producerTable 中
                 producerTable 也是 ConcurrentHashMap，他的 key 就是创建 Producer 时我们自定义的 ProducerGroup
                 一个 group 只对应一个 instance, 从这里我们就可以看出 ProducerGroup 这个 group 概念是基于集群的.
                 之后消费环节的 ConsumerGroup 同理
                */</span>
                <span class="token comment">// 把 instance 注册到 producerTable，明确 instance 角色</span>
                <span class="token keyword">boolean</span> registerOK <span class="token operator">=</span> mQClientFactory<span class="token punctuation">.</span><span class="token function">registerProducer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registerOK<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ProducerGroup 和 MQClientInstance 一一对应，重复就会抛下面的异常</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>serviceState <span class="token operator">=</span> <span class="token class-name">ServiceState</span><span class="token punctuation">.</span><span class="token constant">CREATE_JUST</span><span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">&quot;The producer group[&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token operator">+</span> <span class="token string">&quot;] has been created before, specify another name please.&quot;</span> <span class="token operator">+</span> <span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token function">suggestTodo</span><span class="token punctuation">(</span><span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token constant">GROUP_NAME_DUPLICATE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 把 producer 的信息存入本地的 Topic 路由信息表中，并且初始化该 topic 的路由信息</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getCreateTopicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TopicPublishInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>startFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mQClientFactory<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最终可以看出，producer.start() 其实就是启动 netty 客户端。</span>
                <span class="token punctuation">}</span>

                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;the producer [{}] start OK. sendMessageWithVIPChannel={}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">isSendMessageWithVIPChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 将 ServiceState 修改为 运行中   </span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>serviceState <span class="token operator">=</span> <span class="token class-name">ServiceState</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">RUNNING</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token constant">START_FAILED</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token constant">SHUTDOWN_ALREADY</span><span class="token operator">:</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">&quot;The producer service state not OK, maybe started once, &quot;</span>
                    <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serviceState
                    <span class="token operator">+</span> <span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token function">suggestTodo</span><span class="token punctuation">(</span><span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token constant">CLIENT_SERVICE_NOT_OK</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// producer 发送首次心跳请求。</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">sendHeartbeatToAllBrokerWithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 启动定时任务，这个定时任务是扫描并移除 requestFutureTable 中的过期请求</span>
        <span class="token comment">// 初始启动延迟3秒，之后一秒执行一次</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startScheduledTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单总结一下，创建 producer 并执行 producer.start() 的过程，实际上就是创建了一个自定义的 netty 客户端，标记为 Producer 角色，并且初始化其对应的 groupTable 和本地路由信息表，然后启动该客户端。客户端启动后发出首次心跳，并开启定时任务这个流程。</p><h3 id="producer-send-message-msg" tabindex="-1"><a class="header-anchor" href="#producer-send-message-msg"><span>producer.send(Message msg)</span></a></h3><p>搞清楚了什么是 <code>producer</code> 和 <code>producer.start()</code> 都做了什么之后，接下来我们来看 <code>producer.send()</code>，也就是发送消息的流程。</p><h4 id="defaultmqproducer-send-message-msg" tabindex="-1"><a class="header-anchor" href="#defaultmqproducer-send-message-msg"><span>DefaultMQProducer::send(Message msg)</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">send</span><span class="token punctuation">(</span>
        <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingException</span><span class="token punctuation">,</span> <span class="token class-name">MQBrokerException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 校验 msg</span>
        <span class="token class-name">Validators</span><span class="token punctuation">.</span><span class="token function">checkMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 完善 Topic 信息</span>
        msg<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token function">withNamespace</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducerImpl<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依然是包装。</p><h4 id="defaultmqproducerimpl-send-message-msg" tabindex="-1"><a class="header-anchor" href="#defaultmqproducerimpl-send-message-msg"><span>DefaultMQProducerImpl::send(Message msg)</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">send</span><span class="token punctuation">(</span>
        <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingException</span><span class="token punctuation">,</span> <span class="token class-name">MQBrokerException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getSendMsgTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">,</span>
      <span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingException</span><span class="token punctuation">,</span> <span class="token class-name">MQBrokerException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
      <span class="token comment">// 可以看到我们直接 producer.send(msg) 时，默认为同步的方式。</span>
      <span class="token comment">// CommunicationMode.SYNC</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendDefaultImpl</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">CommunicationMode</span><span class="token punctuation">.</span><span class="token constant">SYNC</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要看 <code>sendDefaultImpl()</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">private</span> <span class="token class-name">SendResult</span> <span class="token function">sendDefaultImpl</span><span class="token punctuation">(</span>
      <span class="token class-name">Message</span> msg<span class="token punctuation">,</span>
      <span class="token keyword">final</span> <span class="token class-name">CommunicationMode</span> communicationMode<span class="token punctuation">,</span> <span class="token comment">// 同步、异步、单向由该参数决定</span>
      <span class="token keyword">final</span> <span class="token class-name">SendCallback</span> sendCallback<span class="token punctuation">,</span>
      <span class="token keyword">final</span> <span class="token keyword">long</span> timeout
  <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingException</span><span class="token punctuation">,</span> <span class="token class-name">MQBrokerException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
      <span class="token comment">// 校验</span>
      <span class="token comment">// 检查 ServiceState 是不是 RUNNING</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeSureStateOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 校验 msg 的合法性，是不是为空啊，是不是超过4m最大小限制等等。</span>
      <span class="token comment">// 跟 defaultMQProducer::send 里面那行校验是一样的是。</span>
      <span class="token class-name">Validators</span><span class="token punctuation">.</span><span class="token function">checkMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">)</span><span class="token punctuation">;</span>  

      <span class="token keyword">final</span> <span class="token keyword">long</span> invokeID <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 用来算超时的各种时间戳变量</span>
      <span class="token keyword">long</span> beginTimestampFirst <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">long</span> beginTimestampPrev <span class="token operator">=</span> beginTimestampFirst<span class="token punctuation">;</span>
      <span class="token keyword">long</span> endTimestamp <span class="token operator">=</span> beginTimestampFirst<span class="token punctuation">;</span>

      <span class="token comment">// tryToFindTopicPublishInfo 方法就是 Intro 中提到的 producer 发消息时的整个路由流程</span>
      <span class="token comment">// 前面看 producer.start() 时，结尾部分不是创建了一个空的路由信息么 new TopicPublishInfo()</span>
      <span class="token comment">// 这个空的 topicPublishInfo 也在这里完成真正的初始化。</span>
      <span class="token comment">// 后面看 DefaultMQProducerImpl 时具体展开。</span>
      <span class="token class-name">TopicPublishInfo</span> topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tryToFindTopicPublishInfo</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 本地路由表不为空 才继续执行</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>topicPublishInfo <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> topicPublishInfo<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">boolean</span> callTimeout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          <span class="token class-name">Exception</span> exception <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

          <span class="token comment">// timesTotal就是一条消息的发送总次数，同步模式下 最多3次，1是正常发送那一次，剩下的两次是默认的重试次数；</span>
          <span class="token comment">// 非同步模式为1次，非同步模式就是单向和异步，单向自然就是一次，异步其实是可以重试的，也就是不止一次。</span>
          <span class="token keyword">int</span> timesTotal <span class="token operator">=</span> communicationMode <span class="token operator">==</span> <span class="token class-name">CommunicationMode</span><span class="token punctuation">.</span><span class="token constant">SYNC</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getRetryTimesWhenSendFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

          <span class="token comment">/* 下面是发送流程  */</span>

          <span class="token comment">// brokersSent 发送次数</span>
          <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> brokersSent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>timesTotal<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> times <span class="token operator">&lt;</span> timesTotal<span class="token punctuation">;</span> times<span class="token operator">++</span><span class="token punctuation">)</span>
              <span class="token comment">// mq 里保存了 topic, brokerName, queueId 三项属性。</span>
              <span class="token class-name">String</span> lastBrokerName <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">==</span> mq <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token comment">/*
                Broker 会为 Topic 创建多个 Queue，默认为 4个 readQueue 和 4个 writeQueue
                selectOneMessageQueue()这个方法这里不过多展开了，可以自己看一下。
               */</span>
              <span class="token comment">// 根据路由信息找到用哪个 Queue，放在什么位置。</span>
              <span class="token class-name">MessageQueue</span> mqSelected <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span>topicPublishInfo<span class="token punctuation">,</span> lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>mqSelected <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  mq <span class="token operator">=</span> mqSelected<span class="token punctuation">;</span>
                  brokersSent<span class="token punctuation">[</span>times<span class="token punctuation">]</span> <span class="token operator">=</span> mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">try</span> <span class="token punctuation">{</span>
                      beginTimestampPrev <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                          <span class="token comment">//Reset topic with namespace during resend.</span>
                          msg<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">withNamespace</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token punctuation">}</span>
                      <span class="token keyword">long</span> costTime <span class="token operator">=</span> beginTimestampPrev <span class="token operator">-</span> beginTimestampFirst<span class="token punctuation">;</span>
                      <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> costTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                          callTimeout <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                          <span class="token keyword">break</span><span class="token punctuation">;</span>
                      <span class="token punctuation">}</span>

                      <span class="token comment">// 这里还是先不展开说明，概括一下就是 ENCODE 好数据包，然后执行 netty 的 writeAndFlush</span>
                      <span class="token comment">// sendKernelImpl 再下一层的代码不明白的可以去看一眼 Netty，过一遍 netty 的 quick start 再回来看毕竟好懂。</span>

                      <span class="token comment">// 发送消息并拿到返回结果。</span>
                      sendResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendKernelImpl</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> mq<span class="token punctuation">,</span> communicationMode<span class="token punctuation">,</span> sendCallback<span class="token punctuation">,</span> topicPublishInfo<span class="token punctuation">,</span> timeout <span class="token operator">-</span> costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      endTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateFaultItem</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTimestamp <span class="token operator">-</span> beginTimestampPrev<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                      <span class="token comment">// 不同模式下返回结果的处理</span>
                      <span class="token keyword">switch</span> <span class="token punctuation">(</span>communicationMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                          <span class="token keyword">case</span> <span class="token constant">ASYNC</span><span class="token operator">:</span> <span class="token comment">// 异步获取结果是利用 callback</span>
                              <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                          <span class="token keyword">case</span> <span class="token constant">ONEWAY</span><span class="token operator">:</span> <span class="token comment">// 单向发送不需要返回结果</span>
                              <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                          <span class="token keyword">case</span> <span class="token constant">SYNC</span><span class="token operator">:</span>  <span class="token comment">// 这里是我们要看的同步</span>
                              <span class="token keyword">if</span> <span class="token punctuation">(</span>sendResult<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">SendStatus</span><span class="token punctuation">.</span><span class="token constant">SEND_OK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token comment">// 重试逻辑，这个变量名 =_=</span>
                                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">isRetryAnotherBrokerWhenNotStoreOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                      <span class="token keyword">continue</span><span class="token punctuation">;</span>
                                  <span class="token punctuation">}</span>
                              <span class="token punctuation">}</span>

                              <span class="token keyword">return</span> sendResult<span class="token punctuation">;</span>
                          <span class="token keyword">default</span><span class="token operator">:</span>
                              <span class="token keyword">break</span><span class="token punctuation">;</span>
                      <span class="token punctuation">}</span>
                      <span class="token comment">// 后面都是异常的处理啥的</span>
                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      endTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateFaultItem</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTimestamp <span class="token operator">-</span> beginTimestampPrev<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s&quot;</span><span class="token punctuation">,</span> invokeID<span class="token punctuation">,</span> endTimestamp <span class="token operator">-</span> beginTimestampPrev<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      exception <span class="token operator">=</span> e<span class="token punctuation">;</span>
                      <span class="token keyword">continue</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      endTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateFaultItem</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTimestamp <span class="token operator">-</span> beginTimestampPrev<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s&quot;</span><span class="token punctuation">,</span> invokeID<span class="token punctuation">,</span> endTimestamp <span class="token operator">-</span> beginTimestampPrev<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      exception <span class="token operator">=</span> e<span class="token punctuation">;</span>
                      <span class="token keyword">continue</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQBrokerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      endTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateFaultItem</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTimestamp <span class="token operator">-</span> beginTimestampPrev<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s&quot;</span><span class="token punctuation">,</span> invokeID<span class="token punctuation">,</span> endTimestamp <span class="token operator">-</span> beginTimestampPrev<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      exception <span class="token operator">=</span> e<span class="token punctuation">;</span>
                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getRetryResponseCodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                          <span class="token keyword">continue</span><span class="token punctuation">;</span>
                      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                          <span class="token keyword">if</span> <span class="token punctuation">(</span>sendResult <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                              <span class="token keyword">return</span> sendResult<span class="token punctuation">;</span>
                          <span class="token punctuation">}</span>

                          <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
                      <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      endTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateFaultItem</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTimestamp <span class="token operator">-</span> beginTimestampPrev<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;sendKernelImpl exception, throw exception, InvokeID: %s, RT: %sms, Broker: %s&quot;</span><span class="token punctuation">,</span> invokeID<span class="token punctuation">,</span> endTimestamp <span class="token operator">-</span> beginTimestampPrev<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;sendKernelImpl exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                  <span class="token keyword">break</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span>sendResult <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span> sendResult<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Send [%d] times, still failed, cost [%d]ms, Topic: %s, BrokersSent: %s&quot;</span><span class="token punctuation">,</span>
              times<span class="token punctuation">,</span>
              <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTimestampFirst<span class="token punctuation">,</span>
              msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>brokersSent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          info <span class="token operator">+=</span> <span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token function">suggestTodo</span><span class="token punctuation">(</span><span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token constant">SEND_MSG_FAILED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token class-name">MQClientException</span> mqClientException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>callTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingTooMuchRequestException</span><span class="token punctuation">(</span><span class="token string">&quot;sendDefaultImpl call timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">MQBrokerException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              mqClientException<span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MQBrokerException</span><span class="token punctuation">)</span> exception<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">RemotingConnectException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              mqClientException<span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token class-name">ClientErrorCode</span><span class="token punctuation">.</span><span class="token constant">CONNECT_BROKER_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">RemotingTimeoutException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              mqClientException<span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token class-name">ClientErrorCode</span><span class="token punctuation">.</span><span class="token constant">ACCESS_BROKER_TIMEOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">MQClientException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              mqClientException<span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token class-name">ClientErrorCode</span><span class="token punctuation">.</span><span class="token constant">BROKER_NOT_EXIST_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token keyword">throw</span> mqClientException<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">validateNameServerSetting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">&quot;No route info of this topic: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token function">suggestTodo</span><span class="token punctuation">(</span><span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token constant">NO_TOPIC_ROUTE_INFO</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token class-name">ClientErrorCode</span><span class="token punctuation">.</span><span class="token constant">NOT_FOUND_TOPIC_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此 <code>producer.send()</code> 的源码分析告一段落。</p><p>前面说过，发送消息支持三种模式，同步、异步、单向。 从前面的代码中我们可以发现，无论那种，最终具体实现都是 <code>defaultMQProducerImpl::sendDefaultImpl()</code> 里完成的。同步和异步的区别主要是入参的不同以及异步需要 callback 获取返回结果。而单向跟同步一个逻辑，只不过返回值被无视了。</p><p>文章最后稍微再补充一些关于 <code>defaultMQProducerImpl</code> 的内容。</p><p>发送消息这里还有一个可以看一下，批量发送消息，也就是 <code>DefaultMQProducer::batch()</code>方法.</p><h4 id="defaultmqproducer-batch" tabindex="-1"><a class="header-anchor" href="#defaultmqproducer-batch"><span>DefaultMQProducer::batch()\`</span></a></h4><p>批量其实就是给单次发送的处理流程外面加了层循环。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">MessageBatch</span> <span class="token function">batch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>

      <span class="token comment">// MessageBatch 内部结构就是 List&lt;Message&gt; messages;</span>
      <span class="token class-name">MessageBatch</span> msgBatch<span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token comment">// 这里 generateFromList 其实主要是对消息集合进行过滤</span>
          <span class="token comment">// 不满足批量发送条件会直接抛异常 注意跟后面的 Validators.checkMessage 进行区分</span>
          msgBatch <span class="token operator">=</span> <span class="token class-name">MessageBatch</span><span class="token punctuation">.</span><span class="token function">generateFromList</span><span class="token punctuation">(</span>msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Message</span> message <span class="token operator">:</span> msgBatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>

              <span class="token comment">// 校验消息合法性 非批量发送也有这一步</span>
              <span class="token class-name">Validators</span><span class="token punctuation">.</span><span class="token function">checkMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

              <span class="token comment">// 在 Message.properties 里添加一组 kv 参数</span>
              <span class="token comment">// UNIQ_KEY：具体的key值，就通过 ip + host + 类加载的 hashcode 啥的有兴趣自己去看</span>
              <span class="token class-name">MessageClientIDSetter</span><span class="token punctuation">.</span><span class="token function">setUniqID</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>

              <span class="token comment">// 设置 topic，非批量发送也有这一步</span>
              message<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token function">withNamespace</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token comment">// 这里 msgBatch.encode() 就是对整个 messageList 进行 encode。</span>
          <span class="token comment">// 具体细节下面展开说</span>
          msgBatch<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>msgBatch<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to initiate the MessageBatch&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      msgBatch<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token function">withNamespace</span><span class="token punctuation">(</span>msgBatch<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> msgBatch<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过代码可以看出<code>batch()</code>方法的逻辑就是把所有 message 加好对应的标记，之后批量 encode，然后存放到<code>msgBatch.setBody</code>等待发送。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token comment">// msgBatch.encode() 就是调用 MessageDecoder.encodeMessages()</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encodeMessages</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//TODO refactor, accumulate in one buffer, avoid copies</span>

      <span class="token comment">// 那个 TODO 是源码里的，无视掉就好了</span>

      <span class="token comment">// 创建一个 buffer list 用来存 encode 之后的 message。</span>
      <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> encodedMessages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 目前还不知道所有 message 加起来一共占用多大内存，所以初始化为0.</span>
      <span class="token keyword">int</span> allSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

      <span class="token comment">// 这个循环，首先对 msg 逐条 encode。</span>
      <span class="token comment">// 然后把 encode 完的 msg 存到 buffer list里</span>
      <span class="token comment">// 之后累加计算所有 msg 最终需要多大的 buffer / 也就是内存。</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Message</span> message <span class="token operator">:</span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token function">encodeMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
          encodedMessages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
          allSize <span class="token operator">+=</span> tmp<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 按照计算出的 size 分配内存</span>
      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>allSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token comment">/* 通过 System.arraycopy 来将前面 buff list，
      也就是 encodedMessages，中的数据复制到 allBytes 中，
      这个 allBytes 就是之后 msgBatch.setBody()的参数。
      */</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">:</span> encodedMessages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> allBytes<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
          pos <span class="token operator">+=</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> allBytes<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="defaultmqproducerimpl" tabindex="-1"><a class="header-anchor" href="#defaultmqproducerimpl"><span>DefaultMQProducerImpl</span></a></h3><p>接下来我们来看看 <code>DefaultMQProducerImpl</code> 类提供的各种具体实现，不过还是老样子，先看属性和构造方法。</p><ul><li><p>属性</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>   <span class="token comment">// 随机数</span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 外层的壳子</span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DefaultMQProducer</span> defaultMQProducer<span class="token punctuation">;</span>
   <span class="token comment">// 之前 intro 里面提过，Producer 本地是有缓存 topic 的路由信息的，就是存在这里。</span>
   <span class="token comment">//本地路由信息表。key: Topic, Value: TopicPublishInfo</span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* topic */</span><span class="token punctuation">,</span> <span class="token class-name">TopicPublishInfo</span><span class="token operator">&gt;</span> topicPublishInfoTable <span class="token operator">=</span>
       <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TopicPublishInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 存 hook 的 list      </span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendMessageHook</span><span class="token punctuation">&gt;</span></span> sendMessageHookList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendMessageHook</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EndTransactionHook</span><span class="token punctuation">&gt;</span></span> endTransactionHookList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EndTransactionHook</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// hook ，支持两个阶段，request 之前 和 request 之后</span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">;</span>

   <span class="token comment">// 异步发送时用的 workQueue 和 Executor</span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> asyncSenderThreadPoolQueue<span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> defaultAsyncSenderExecutor<span class="token punctuation">;</span>

   <span class="token comment">// 定时任务的 Executor</span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span>r <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&quot;RequestHouseKeepingService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 这俩也是一套 workQueue + Executor。</span>
   <span class="token keyword">protected</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> checkRequestQueue<span class="token punctuation">;</span>
   <span class="token keyword">protected</span> <span class="token class-name">ExecutorService</span> checkExecutor<span class="token punctuation">;</span>

   <span class="token comment">// 状态字段 代表 instance 刚刚创建</span>
   <span class="token keyword">private</span> <span class="token class-name">ServiceState</span> serviceState <span class="token operator">=</span> <span class="token class-name">ServiceState</span><span class="token punctuation">.</span><span class="token constant">CREATE_JUST</span><span class="token punctuation">;</span>

   <span class="token comment">// instance</span>
   <span class="token keyword">private</span> <span class="token class-name">MQClientInstance</span> mQClientFactory<span class="token punctuation">;</span>

   <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CheckForbiddenHook</span><span class="token punctuation">&gt;</span></span> checkForbiddenHookList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CheckForbiddenHook</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 压缩级别</span>
   <span class="token keyword">private</span> <span class="token keyword">int</span> zipCompressLevel <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MESSAGE_COMPRESS_LEVEL</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 失败策略</span>
   <span class="token keyword">private</span> <span class="token class-name">MQFaultStrategy</span> mqFaultStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MQFaultStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> asyncSenderExecutor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token class-name">DefaultMQProducerImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DefaultMQProducer</span> defaultMQProducer<span class="token punctuation">,</span> <span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer <span class="token operator">=</span> defaultMQProducer<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rpcHook <span class="token operator">=</span> rpcHook<span class="token punctuation">;</span>

        <span class="token comment">// 下面就是创建 workQueue 和 ThreadPoolExecutor  </span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>asyncSenderThreadPoolQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultAsyncSenderExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>asyncSenderThreadPoolQueue<span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> threadIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&quot;AsyncSenderExecutor_&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>threadIndex<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>tryToFindTopicPublishInfo 方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token class-name">TopicPublishInfo</span> <span class="token function">tryToFindTopicPublishInfo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 从本地路由信息表里，根据 topic 取出对应的本地路由信息</span>
     <span class="token class-name">TopicPublishInfo</span> topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> topicPublishInfo <span class="token operator">||</span> <span class="token operator">!</span>topicPublishInfo<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果 topic 的路由信息不存在</span>
         <span class="token comment">// 保护代码        </span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TopicPublishInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


         <span class="token comment">// 从 NameServer 上拉数据，更新本地路由信息表以及一系列相关信息。</span>
         <span class="token comment">// 这个方法是线程安全的。 这个展开也超长，有兴趣可以自己看一下</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">updateTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 更新完本地路由信息表后重新取出 topic 的路由信息</span>
         topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token comment">// 路由信息存在，则直接返回。</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>topicPublishInfo<span class="token punctuation">.</span><span class="token function">isHaveTopicRouterInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> topicPublishInfo<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> topicPublishInfo<span class="token punctuation">;</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 还不存在，再次去 broker 更新</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">updateTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">)</span><span class="token punctuation">;</span>
         topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> topicPublishInfo<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>sendKernelImpl</p><p>这里就是前面说的 producer.send() 方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 这个可就太长了，只贴 switch 这段</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>communicationMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">ASYNC</span><span class="token operator">:</span> <span class="token comment">// 异步</span>
        <span class="token class-name">Message</span> tmpMessage <span class="token operator">=</span> msg<span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> messageCloned <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msgBodyCompressed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//If msg body was compressed, msgbody should be reset using prevBody.</span>
            <span class="token comment">//Clone new message using commpressed message body and recover origin massage.</span>
            <span class="token comment">//Fix bug:https://github.com/apache/rocketmq-externals/issues/66</span>
            tmpMessage <span class="token operator">=</span> <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">cloneMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            messageCloned <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            msg<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>prevBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>topicWithNamespace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>messageCloned<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tmpMessage <span class="token operator">=</span> <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">cloneMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                messageCloned <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            msg<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token class-name">NamespaceUtil</span><span class="token punctuation">.</span><span class="token function">withoutNamespace</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 超时判断</span>
        <span class="token keyword">long</span> costTimeAsync <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginStartTime<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> costTimeAsync<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingTooMuchRequestException</span><span class="token punctuation">(</span><span class="token string">&quot;sendKernelImpl call timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sendResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getMQClientAPIImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>
            brokerAddr<span class="token punctuation">,</span>
            mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            tmpMessage<span class="token punctuation">,</span>
            requestHeader<span class="token punctuation">,</span>
            timeout <span class="token operator">-</span> costTimeAsync<span class="token punctuation">,</span>
            communicationMode<span class="token punctuation">,</span>
            sendCallback<span class="token punctuation">,</span>
            topicPublishInfo<span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getRetryTimesWhenSendAsyncFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            context<span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">ONEWAY</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token constant">SYNC</span><span class="token operator">:</span>
        <span class="token keyword">long</span> costTimeSync <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginStartTime<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> costTimeSync<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingTooMuchRequestException</span><span class="token punctuation">(</span><span class="token string">&quot;sendKernelImpl call timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 同步发送消息。</span>
        sendResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getMQClientAPIImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>
            brokerAddr<span class="token punctuation">,</span>
            mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            msg<span class="token punctuation">,</span>
            requestHeader<span class="token punctuation">,</span>
            timeout <span class="token operator">-</span> costTimeSync<span class="token punctuation">,</span>
            communicationMode<span class="token punctuation">,</span>
            context<span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">assert</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有兴趣的话可以从 <code>this.mQClientFactory.getMQClientAPIImpl()</code> 方法继续往下看， 再下面一层就是 netty 层了，如何封装 request/response，header/body，api 怎么写什么的。 最终你应该能找到对 <code>NettyRemotingAbstract::invokeSyncImpl()</code> 方法的调用，这个方法 里就能看到熟悉的 <code>channel.writeAndFlush(request)</code>。</p></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本文以跟随 <code>producer.send()</code> 为主线，通过对源码进行跟踪来了解 producer 发送消息背后的整体逻辑和流程。</p><p>PS. RocketMQ 的源码是真的很难读，后面的篇幅会进一步省略一些与主线逻辑关系不大的代码片段。</p>`,49),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","send-msg.html.vue"]]),d=JSON.parse('{"path":"/docs/message-queue/rocketmq/send-msg.html","title":"RocketMQ 源码分析-发送消息","lang":"zh-CN","frontmatter":{"title":"RocketMQ 源码分析-发送消息","order":2,"description":"RocketMQ 源码分析-发送消息 这里开始详细聊聊 RocketMQ 发送消息的各种细节。 前面在简介里面说了，从使用者的角度，Producer 看起来就是直接往 Topic 里面塞消息。而实际上呢，要先去 Namesrv 找到 Topic 的路由信息，然后才能确定 Topic 是由哪个 Broker 管理。 发送消息支持三种方式，同步、异步、单向...","head":[["meta",{"property":"og:url","content":"https://lament-z.com/docs/message-queue/rocketmq/send-msg.html"}],["meta",{"property":"og:site_name","content":"鲸鱼气球"}],["meta",{"property":"og:title","content":"RocketMQ 源码分析-发送消息"}],["meta",{"property":"og:description","content":"RocketMQ 源码分析-发送消息 这里开始详细聊聊 RocketMQ 发送消息的各种细节。 前面在简介里面说了，从使用者的角度，Producer 看起来就是直接往 Topic 里面塞消息。而实际上呢，要先去 Namesrv 找到 Topic 的路由信息，然后才能确定 Topic 是由哪个 Broker 管理。 发送消息支持三种方式，同步、异步、单向..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T06:42:47.000Z"}],["meta",{"property":"article:author","content":"lament-z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T06:42:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RocketMQ 源码分析-发送消息\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-17T06:42:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lament-z\\",\\"url\\":\\"https://lament-z.com\\"}]}"]]},"headers":[{"level":2,"title":"前置要求","slug":"前置要求","link":"#前置要求","children":[]},{"level":2,"title":"源码分析","slug":"源码分析","link":"#源码分析","children":[{"level":3,"title":"从发送消息开始","slug":"从发送消息开始","link":"#从发送消息开始","children":[]},{"level":3,"title":"producer.start()","slug":"producer-start","link":"#producer-start","children":[]},{"level":3,"title":"producer.send(Message msg)","slug":"producer-send-message-msg","link":"#producer-send-message-msg","children":[]},{"level":3,"title":"DefaultMQProducerImpl","slug":"defaultmqproducerimpl","link":"#defaultmqproducerimpl","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1707897724000,"updatedTime":1708152167000,"contributors":[{"name":"Lament","email":"lament.wy@gmail.com","commits":3}]},"readingTime":{"minutes":14.13,"words":4239},"filePathRelative":"docs/message-queue/rocketmq/send-msg.md","localizedDate":"2024年2月14日","autoDesc":true,"excerpt":"\\n<p>这里开始详细聊聊 RocketMQ 发送消息的各种细节。</p>\\n<p>前面在简介里面说了，从使用者的角度，Producer 看起来就是直接往 Topic 里面塞消息。而实际上呢，要先去 Namesrv 找到 Topic 的路由信息，然后才能确定 Topic 是由哪个 Broker 管理。</p>\\n<p>发送消息支持三种方式，同步、异步、单向，区别很简单不再赘述，下文以同步为例进行分析。</p>\\n<h2>前置要求</h2>\\n<p>这里就假设读者已经顺利完成了 quick start 中的内容，收发消息已经全部成功。</p>\\n<h2>源码分析</h2>\\n<p>整个过程以描述+代码注释的方式进行。</p>"}');export{r as comp,d as data};
