import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as s,b as n,d as l,e as a}from"./app-BwsoMA_K.js";const i={},u=a('<h1 id="rocketmq-源码分析-高可用" tabindex="-1"><a class="header-anchor" href="#rocketmq-源码分析-高可用"><span>RocketMQ 源码分析-高可用</span></a></h1><p>高可用基本是分布式系统必备特性之一，实现方案通常为主从机制。</p><p>RocketMQ 的高可用就挺特别，它有主从同步但是没有主从切换，读写分离也并不彻底， 正常情况下所有消费者都是从 master 上拉取消息，只有积压消息超过 master 物理内存的 40%时，消费者切换到 slave 上进行消费，此时其实才是“读写分离”的。当 slave 上的积压消息小于 30% 时，消费者会再次切换回 master 进行消费。</p><h2 id="主从同步" tabindex="-1"><a class="header-anchor" href="#主从同步"><span>主从同步</span></a></h2><p>RocketMQ 的主从同步实际上就是 Broker 的主从同步，每当消息送达 Broker-Master 时，要同步到 Broker-Slave，这样一旦 Master 挂了，Consumer 可以从 Slave 拉取消息。</p><p>接下来看代码，源码位置：rocketmq/store.ha 的 <code>org.apache.rocketmq.store.ha</code> 包。</p><h3 id="机制概述" tabindex="-1"><a class="header-anchor" href="#机制概述"><span>机制概述</span></a></h3><p>Broker 主从机制的基本流程如下：</p><ol><li><p>Step1：Master 启动并监听端口</p><p>Broker-Master 启动时会监听 MessageStoreConfig.haListenPort 端口，等待 Slave 的连接。</p></li><li><p>Step2：Slave 启动并主动连接 Master</p><p>就是 Slave 主动与上一步的 Broker:haListenPort 建立链接。</p></li><li><p>Step3：同步消息</p><p>链接建立后，Slave 向 Master 发送待拉取消息的 offset，Master 根据请求返回消息给 Slave。</p></li><li><p>Step4：保存 &amp; 继续同步</p><p>Slave 保存收到的消息后继续重复以上流程。</p></li></ol><p>接下来我们就根据这个流程来看 HA 的代码。</p><h4 id="step1" tabindex="-1"><a class="header-anchor" href="#step1"><span>Step1</span></a></h4>',11),r={href:"https://lament-z.com/docs/message-queue/rocketmq/broker-01.html#%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"BrokerStartup::createBrokerController",-1),d=a(`<p>这里我们来看一下它：</p><ul><li><p>BrokerStartup::createBrokerController</p><p>感觉 Broker 的下篇都没啥可写的了，都分散到其他章节里去了，回头重新调整一下 Broker 篇的内容。</p><p>下面是设置监听端口(haListenPort)：</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// BrokerStartup::createBrokerController</span>
<span class="token comment">// 只看设置监听端口部分 其余均省略</span>
<span class="token comment">// listenPort 默认值虽然是 8888，但这里直接设置成了 10911</span>
nettyServerConfig<span class="token punctuation">.</span><span class="token function">setListenPort</span><span class="token punctuation">(</span><span class="token number">10911</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// haListenPort 的逻辑值是 listenPort + 1</span>
<span class="token comment">// 默认值是 10912，实际值算出来也是 10911 + 1 = 10912</span>
messageStoreConfig<span class="token punctuation">.</span><span class="token function">setHaListenPort</span><span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getListenPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 根据角色设置 master 的 BrokerID</span>
<span class="token comment">// BrokerID 应该自行在配置文件中设置好，master 为 0，slave &gt; 0，多个 slave 要区分开</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">ASYNC_MASTER</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token constant">SYNC_MASTER</span><span class="token operator">:</span> <span class="token comment">// Master 的 BrokerID 为 0</span>
        brokerConfig<span class="token punctuation">.</span><span class="token function">setBrokerId</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MASTER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>                          
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>BrokerController::start</code> 中找到 <code>this.messageStore.start();</code>，HA 属于存储模块，在 <code>DefaultMessageStore::start()</code> 中找到 <code>haService.start();</code>。</p><div class="hint-container tip"><p class="hint-container-title">4.x 版本</p><p>注意 分布式 CommitLog，或者说 DLedger 与高可用模式不兼容</p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// from DefaultMessageStore::start()</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">isEnableDLegerCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>haService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleScheduleMessageService</span><span class="token punctuation">(</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后来看主角 <code>HAService</code>。</p><ul><li>HAService::start</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 监听 haListenPort 端口， NIO   </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>acceptSocketService<span class="token punctuation">.</span><span class="token function">beginAccept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面三个都是服务线程， ServiceThread  </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>acceptSocketService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>groupTransferService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>haClient<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，第一步的实现已经看完了，Master 在创建 BrokerController 时会设置 haListenPort 的值，存储模块启动时会启动 haService，haService 启动时会监听 haListenPort 等待 Slave 的连接。</p><h4 id="step2" tabindex="-1"><a class="header-anchor" href="#step2"><span>Step2</span></a></h4><p>Slave 启动并主动连接 Master。</p><p>Broker-Slave 的 BrokerID 是用户自己在配置文件里指定的，必须大于0，而且同一个 Master 如果你配置多个 slave 的话，他们的 brokerID 不能相同。</p><p>启动流程就省略了，只看它连接 Master，这部分代码就在 <code>this.haClient.start();</code>。</p><p><code>HAClient</code> 是服务线程，直接去看它的 <code>run</code> 方法，可以找到 <code>this.connectMaster()</code>。</p><ul><li>HAClient::connectMaster</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">connectMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClosedChannelException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> socketChannel<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// sc 为空，则尝试与 master 建立连接</span>
        <span class="token class-name">String</span> addr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>masterAddress<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 转换类型，从 String 到 InetSocketAddress</span>
            <span class="token class-name">SocketAddress</span> socketAddress <span class="token operator">=</span> <span class="token class-name">RemotingUtil</span><span class="token punctuation">.</span><span class="token function">string2SocketAddress</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>socketAddress <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 连接到 master</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>socketChannel <span class="token operator">=</span> <span class="token class-name">RemotingUtil</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>socketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socketChannel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token comment">// 注册 OP_READ 事件，不认识的话，你就把它理解为网络IO事件的读事件</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currentReportedOffset <span class="token operator">=</span> <span class="token class-name">HAService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMaxPhyOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastWriteTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>socketChannel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意 master 和 slave 建立 tls 链接这部分都是 java nio，不是 netty 语境。</p></div><h4 id="step3-step4" tabindex="-1"><a class="header-anchor" href="#step3-step4"><span>Step3 &amp; Step4</span></a></h4><p>同步消息，保存，重复以上流程。</p><p>回到 <code>HAClient::run</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// HAClient::run</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service started&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>   
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">connectMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//step2</span>
                <span class="token comment">// 只要 channel 还在就会进入这里</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isTimeToReportOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 距离上次 ReportOffset 超过 5s 就为 true</span>

                    <span class="token comment">// Step3 中的上报 offset</span>
                    <span class="token comment">// 向 master 上报 slave 端当前最大偏移量</span>
                    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reportSlaveMaxOffset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentReportedOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭 channel</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// step3 中的 master 返回消息，以及 step 4 中的保存数据</span>
                <span class="token comment">// 这里的 ReadEvent 就是 IO 概念里的读事件</span>
                <span class="token comment">// 也就是 slave 读取 master 根据 slaveMaxOffset 返回的待同步消息</span>
                <span class="token comment">// 具体点说就是： 先从 channel 中读数据，一次最多读 4MB，读到数据后调用</span>
                <span class="token comment">// dispatchReadRequest 方法，这个方法会解码读到的数据，并 append 到 slave 的 commitLog 文件中。</span>
                <span class="token comment">// 保存消息的流程，详见持久化篇 defaultMessageStore.appendToCommitLog -&gt; .commitLog.appendData -&gt; mappedFile.appendMessage</span>
                <span class="token keyword">boolean</span> ok <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processReadEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 更新 haService.currentReportedOffset</span>
                <span class="token comment">// 并再次上报 offset</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">reportSlaveMaxOffsetPlus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">long</span> interval <span class="token operator">=</span>
                    <span class="token class-name">HAService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDefaultMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastWriteTimestamp<span class="token punctuation">;</span>
                <span class="token comment">// 写入间隔超过 20s，则认为链接无效，关闭 channel。        </span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">&gt;</span> <span class="token class-name">HAService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDefaultMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getHaHousekeepingInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;HAClient, housekeeping, found this connection[&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>masterAddress
                        <span class="token operator">+</span> <span class="token string">&quot;] expired, &quot;</span> <span class="token operator">+</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;HAClient, master not response some time, so close connection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// slave 未能和 master 建立链接，则 5s 后重试</span>
                <span class="token comment">// 利用自定义的 CountDownLatch 实现的，叫 CountDownLatch2，有兴趣可以自己去看</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service has exception. &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>高可用流程的实现就基本看完啦，无论是之前的 netty 还是这里的 Java NIO 部分都不在讲解范围内，因此都略过啦，有兴趣可以自己去看。</p><p>然后来看一下 HA 核心类。</p><h3 id="haservice" tabindex="-1"><a class="header-anchor" href="#haservice"><span>HAService</span></a></h3><p>HAService 就是高可用的核心实现类，它有三个内部类：<code>AcceptSocketService</code>、<code>GroupTransferService</code>、<code>HAClient</code>。它内部还维护一个 <code>HAConnection</code> 列表（<code>private final List&lt;HAConnection&gt; connectionList = new LinkedList&lt;&gt;();</code>）。</p><p>我们挨个来看，首先是 <code>AcceptSocketService</code>:</p><ul><li><p>AcceptSocketService</p><p><code>AcceptSocketService</code> 是个服务线程，还是先看 run 方法，它的主要工作就是监听 haListenPort 端口上的 IO 事件/状态，只要满足条件就建立链接，并且创建一个 <code>HAConnection</code> 对象，并存入 <code>this.connectionList</code>。</p><p>而前面提到的另一个方法 <code>AcceptSocketService::beginAccept</code>，就是为监听端口的准备工作，因此要在 <code>AcceptSocketService</code> 启动前执行。</p><p>说白了，<code>AcceptSocketService</code> 就是 master 用来监听 slave 连接的实现类。</p></li><li><p>GroupTransferService</p></li></ul><p><code>GroupTransferService</code> 的 run 方法逻辑为每 10ms 执行一次 <code>doWaitTransfer</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doWaitTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestsRead<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CommitLog<span class="token punctuation">.</span>GroupCommitRequest</span> req <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestsRead<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// tansferOK 就是主从同步是否完成的标记。</span>
            <span class="token comment">// req.getNextOffset()  是从 master 传回来的下一条新消息的 offset</span>
            <span class="token comment">// push2SlaveMaxOffset 是 salve 目前已同步的最大 offset</span>
            <span class="token comment">// 当 slave 上同步的 offset &gt;= master 上新消息的起始位置，说明 salve 已经追平 master 的进度，甚至超出</span>
            <span class="token keyword">boolean</span> transferOK <span class="token operator">=</span> <span class="token class-name">HAService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>push2SlaveMaxOffset<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> req<span class="token punctuation">.</span><span class="token function">getNextOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> waitUntilWhen <span class="token operator">=</span> <span class="token class-name">HAService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getSystemClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">+</span> <span class="token class-name">HAService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSyncFlushTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 未追平时，该循环运行间隔为 1s，SyncFlushTimeout 为 5s，所以 requestsRead 中的每个 req 通常会循环5次</span>
            <span class="token comment">// 一旦追平 or 超时都会退出循环</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>transferOK <span class="token operator">&amp;&amp;</span> <span class="token class-name">HAService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getSystemClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> waitUntilWhen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>notifyTransferObject<span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                transferOK <span class="token operator">=</span> <span class="token class-name">HAService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>push2SlaveMaxOffset<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> req<span class="token punctuation">.</span><span class="token function">getNextOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>transferOK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;transfer messsage to slave timeout, &quot;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getNextOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 这里是给 producer 的返回，追平说明主从刷盘均成功；如果前面哪个循环中没有追平，则返回 Slave刷盘超时的状态</span>
            req<span class="token punctuation">.</span><span class="token function">wakeupCustomer</span><span class="token punctuation">(</span>transferOK <span class="token operator">?</span> <span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">PUT_OK</span> <span class="token operator">:</span> <span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">FLUSH_SLAVE_TIMEOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 将 读列表 至空</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>requestsRead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上述代码我们可以得出一个结论，<code>GroupTransferService</code> 的主要工作就是监视 slave 的同步状态，以便为发送消息的 producer 返回响应。</p><p>然后来看一下 <code>GroupTransferService</code> 的其他内容，首先是它内部创建了俩队列，<code>requestsWrite</code> 和 <code>requestsRead</code>。这个读写队列跟前几篇讲的读写分离技巧是一样的，两个队列交换的时机是: <code>run -&gt; waitForRunning(10) -&gt; this.onWaitEnd();</code>。</p><p>还有一个方法的逻辑要看，那就是 <code>notifyTransferSome</code>，不过 <code>GroupTransferService::notifyTransferSome</code> 只是唤醒逻辑，完整处理逻辑在主类的同名方法里：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// HAService::notifyTransferSome</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyTransferSome</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里的 offset 参数可以直接看作 新的 push2SlaveMaxOffset 的值</span>
    <span class="token comment">// 或者对于 value 来说就是 newValue</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>push2SlaveMaxOffset<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> offset <span class="token operator">&gt;</span> value<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 更新 push2SlaveMaxOffset</span>
        <span class="token keyword">boolean</span> ok <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>push2SlaveMaxOffset<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 唤醒 GroupTransferService</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>groupTransferService<span class="token punctuation">.</span><span class="token function">notifyTransferSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>push2SlaveMaxOffset<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法的调用时机时机是 master 收到 slave 的拉取请求后，细节后面会讲。</p><ul><li>HAClient</li></ul><p><code>HAClient</code> 就要复杂一些，这个类 master/slave 都会用到。它主要负责处理各种业务逻辑。 比如前面我们过流程的时候提到的连接 master 就是它的 <code>connectMaster</code> 方法。</p><p>这阅读部分代码需要注意一点，以 <code>connectMaster</code> 方法为例，很明显这个方法就是给 slave 用的，但实际上 master 也会进入这个方法。</p><p><code>HAClient</code> 的核心方法在前面分析流程的时候已经解释的差不多了，只不过因为大部分都是 IO 代码，没有单独贴出来。</p><p>这里简单说说其他没出现过的方法。</p><p><code>HAClient::updateMasterAddress</code>，这个顾名思义，更新 Master 地址，发生在 slave 的 masterAddress 为空，或者收到新地址时。</p><p><code>HAClient::reallocateByteBuffer</code> 和 <code>HAClient::swapByteBuffer</code> 两个方法合起来实现了 <code>byteBufferRead</code> 的读写状态切换功能，这俩方法就相当于是手动实现了一遍 <code> this.byteBufferRead.flip();</code> 。 这个也是 IO 的内容，给看不懂的小伙伴简单解释下，在这里数据都是加密的数据流的形式，你可以把他想成一个长度未知的一维数组，里面存储的都是加密(encode)后的数据，数据此时就像水管里的水流，（读事件）读数据的时候要么是读到没数据为止，要么是读固定长度，这个过程你就可以想成一个指向数组下标的指针在不断移动，读到哪就指到哪；而当你要切换到写状态时，你肯定是要把数据从头开始写，也就是下标 0 的位置，但是你指针现在在读的位置。<code>byteBuffer::flip()</code> 就是帮你把下标置换回 0，详细说明可以看它的注释，解释的很好，还给了用例。由于本文跳过了关于 netty 和 IO 部分的代码，实际上前面几篇中 netty 部分都是用 <code>flip()</code> 的。对 IO 不熟悉的小伙伴强烈建议跟着 netty 文档动手写一遍文档里所有的 demo，这样什么 handle、encode/decode、粘包处理等等常见问题都会有清晰的认识 。</p><h3 id="haconnection" tabindex="-1"><a class="header-anchor" href="#haconnection"><span>HAConnection</span></a></h3><p>这个类就是用来管理连接和网络 IO 读写的类，他有俩内部类，<code>ReadSocketService</code> 和 <code>WriteSocketService</code>，这俩 Service 也是服务线程。</p><p><code>HAConnection</code> 的构造方法其实就是创建一个“链接:connection”，并同时为该“链接”创建读写两个线程。 其实就是把 slave 与 master 进行网络通讯的 socketChannel 封装成了一个链接对象。</p><p>然后来看它的俩属性，<code>slaveRequestOffset</code> 属性就是 slave 要请求的 offset，默认值 -1，代表拉取还未开始，请求行为会直接放弃，0 代表按照 slave 当前的 maxOffset 拉取，其余情况就是按它的真实值拉取。</p><p><code>slaveAckOffset</code>，slave 向 master 反馈已同步的偏移量。这个值就是 <code>HAService::notifyTransferSome</code> 方法的入参。</p><p>了解以上他们的含义后，分析读写线程的业务逻辑就比较简单了，二者实际上非常相似，基本流程都是先 encode 数据，然后调用 <code>ReadSocketService::processReadEvent / WriteSocketService::transferData</code> 完成网络传输（包括粘包处理等)，传输完成后进行 decode，如果有其他逻辑则执行。最终释放各种资源，并销毁线程。</p><h2 id="主从切换" tabindex="-1"><a class="header-anchor" href="#主从切换"><span>主从切换</span></a></h2><p>主从切换/读写分离的大致逻辑就不再重复了，这里直接来看这部分逻辑是如何实现的。</p><p>首先来看，Consumer 如何找到具体的 Broker 的，前面在消费篇里提过，Consumer 根据 <code>MessageQueue</code> 去确定 Broker。这里我们更进一步，去看之前没继续展开的调用链。</p><p>通过消费篇我们知道，负责从 broker 拉取消息的是 <code>DefaultMQPushConsumerImpl::pullMessage</code> 方法，该方法最终是通过调用 <code>this.pullAPIWrapper.pullKernelImpl(...)</code> 来完成消息拉取的，而这个方法里第一步就是根据 <code>MessageQueue</code> 找 Broker:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mq 参数的类型就是 MessageQueue</span>
<span class="token class-name">FindBrokerResult</span> findBrokerResult <span class="token operator">=</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">findBrokerAddressInSubscribe</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">recalculatePullFromWhichNode</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们要找到俩方法都在这里了，一个是 <code>findBrokerAddressInSubscribe</code>，一个是 <code>recalculatePullFromWhichNode</code>。</p><p><code>findBrokerAddressInSubscribe</code> 方法的功能就是根据 BrokerName 和 BrokerID 找到对应的 BrokerAddress，然后把相关信息塞进 <code>FindBrokerResult</code> 对象中并返回。</p><p>BrokerName 的值来自 <code>mq.getBrokerName</code>，这个没啥可说的，主要看 brokerID，也就是 <code>this.recalculatePullFromWhichNode(mq)</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">recalculatePullFromWhichNode</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> mq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 这个不用看，这是用户指定</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isConnectBrokerByUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultBrokerId<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token comment">// 主从是否要切换就取决于 suggest</span>
     <span class="token class-name">AtomicLong</span> suggest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pullFromWhichNodeTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>suggest <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> suggest<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token comment">// 默认只访问 master  </span>
     <span class="token keyword">return</span> <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MASTER_ID</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码中我们可以看出，Consumer 是否切换 broker 就取决于 suggest 的值，(pullFromWhichNodeTable 中以 MessageQueue 为 key，suggest 为 value)。那么 suggest 的值是哪来的，在 <code>processPullResult</code> 中 <code>this.updatePullFromWhichNode(mq, pullResultExt.getSuggestWhichBrokerId());</code> 这一步。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//updatePullFromWhichNode</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updatePullFromWhichNode</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> mq<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> brokerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">AtomicLong</span> suggest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pullFromWhichNodeTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> suggest<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 为空则创建，相当于初始化</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>pullFromWhichNodeTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span>brokerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
         <span class="token comment">// 非空则 update BrokerID</span>
         suggest<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>brokerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说 suggest 是由 Broker 反馈给 Consumer 的。那么我们去 Broker 看 suggest 如何生成。</p><p>前文提到了，大于 40% 时由主切从，小于 30% 由从切主，先来看这个值的初始化：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// BrokerStartup.class</span>
<span class="token comment">// 物理内存最大占比， 40 就是 40%，Slave 是 30%</span>
<span class="token comment">// master 40% 是切换 slave 的阈值</span>
<span class="token comment">// slave 30% 是切回 master 的阈值</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BrokerRole</span><span class="token punctuation">.</span><span class="token constant">SLAVE</span> <span class="token operator">==</span> messageStoreConfig<span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ratio <span class="token operator">=</span> messageStoreConfig<span class="token punctuation">.</span><span class="token function">getAccessMessageInMemoryMaxRatio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>
    messageStoreConfig<span class="token punctuation">.</span><span class="token function">setAccessMessageInMemoryMaxRatio</span><span class="token punctuation">(</span>ratio<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后来看:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// DefaultMessageStore::getMessage  </span>
<span class="token keyword">long</span> diff <span class="token operator">=</span> maxOffsetPy <span class="token operator">-</span> maxPhyOffsetPulling<span class="token punctuation">;</span>
<span class="token keyword">long</span> memory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">StoreUtil</span><span class="token punctuation">.</span><span class="token constant">TOTAL_PHYSICAL_MEMORY_SIZE</span>
   <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getAccessMessageInMemoryMaxRatio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 这里决定是否主从切换</span>
getResult<span class="token punctuation">.</span><span class="token function">setSuggestPullingFromSlave</span><span class="token punctuation">(</span>diff <span class="token operator">&gt;</span> memory<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后在 <code>PullMessageProcessor::processRequest</code> 中设置 consumer 拿到的 brokerID，如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// DefaultMessageStore::getMessage 就在这段代码前调用</span>
<span class="token comment">// 根据 suggest 设置 brokerID</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>getMessageResult<span class="token punctuation">.</span><span class="token function">isSuggestPullingFromSlave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    responseHeader<span class="token punctuation">.</span><span class="token function">setSuggestWhichBrokerId</span><span class="token punctuation">(</span>subscriptionGroupConfig<span class="token punctuation">.</span><span class="token function">getWhichBrokerWhenConsumeSlowly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    responseHeader<span class="token punctuation">.</span><span class="token function">setSuggestWhichBrokerId</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MASTER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 <code>PullMessageProcessor::processRequest</code> 做个简单说明，<code>PullMessageProcessor</code> 可以简单看作负责处理请求的类，<code>processRequest</code> 就是处理请求的方法。</p><h2 id="元数据同步" tabindex="-1"><a class="header-anchor" href="#元数据同步"><span>元数据同步</span></a></h2><div class="hint-container note"><p class="hint-container-title">注</p><p>本章节目录结构来自《RocketMQ 技术内幕》。</p></div><p>这里所说的元数据指的是，Broker 中存储的 topic、消费组、消费进度等信息。</p><p>前两个大章节介绍了 HA 的主从同步和主从切换，除了以上功能外，master 宕机时，虽然无法写入消息，但是消费短期内是不受影响的，consumer 依然可以从 slave 上进行消费。master 恢复后，slave 可以把“元数据”，比如集群模式的消费进度，主动同步回 master。</p><h3 id="slave-自动同步元数据" tabindex="-1"><a class="header-anchor" href="#slave-自动同步元数据"><span>Slave 自动同步元数据</span></a></h3><p>这个同步是单向的，只会是 slave 向 master 同步数据，这就是 broker 篇启动流程中的 <code>BrokerController::handleSlaveSynchronize</code> 方法。</p><p>实现方式就是通过定时任务，每 10s 与 master 同步一次数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleSlaveSynchronize</span><span class="token punctuation">(</span><span class="token class-name">BrokerRole</span> role<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>role <span class="token operator">==</span> <span class="token class-name">BrokerRole</span><span class="token punctuation">.</span><span class="token constant">SLAVE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> slaveSyncFuture<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              slaveSyncFuture<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>slaveSynchronize<span class="token punctuation">.</span><span class="token function">setMasterAddr</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          slaveSyncFuture <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token annotation punctuation">@Override</span>
              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">try</span> <span class="token punctuation">{</span>
                      <span class="token comment">// 同步</span>
                      <span class="token class-name">BrokerController</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>slaveSynchronize<span class="token punctuation">.</span><span class="token function">syncAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
                  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ScheduledTask SlaveSynchronize syncAll error.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">//handle the slave synchronise</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> slaveSyncFuture<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              slaveSyncFuture<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>slaveSynchronize<span class="token punctuation">.</span><span class="token function">setMasterAddr</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体同步哪些数据可以可根据代码自行查看：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">syncTopicConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">syncConsumerOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">syncDelayOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">syncSubscriptionGroupConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消费进度同步" tabindex="-1"><a class="header-anchor" href="#消费进度同步"><span>消费进度同步</span></a></h3><p>由于消费进度变化很快，只靠 10s 一次的同步显然有点慢，因此还有另外一种方式，就是通过 consumer 发来的 pullMessage 请求，如果其中包含的消费进度的信息，就直接拿来更新本地消费进度。</p><p>这部分代码也在 <code>PullMessageProcessor::processRequest</code>，感兴趣自行查看。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>高可用也写完啦，撒花 😃</p><p>关于 RocketMQ 的文章至此也就暂时告一段落啦，后续会重新调整一下 Broker 篇的内容，以及纠错等等。</p><p>消息轨迹、ACL 啥的就不更啦。</p><p>未来关于 RocketMQ 的文章大概就是找个合适的时间把 5.0 的内容放上来。</p>`,85);function v(m,b){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("首先是 Broker-Master 启动并监听端口，这一步的入口实际上就是在"),s("a",r,[n("Broker-启动流程"),l(e)]),n("中没有详细展开的 "),k,n(" 方法里。")]),d])}const g=t(i,[["render",v],["__file","ha.html.vue"]]),y=JSON.parse('{"path":"/docs/message-queue/rocketmq/ha.html","title":"RocketMQ 源码分析-高可用 HA","lang":"zh-CN","frontmatter":{"title":"RocketMQ 源码分析-高可用 HA","order":7,"description":"RocketMQ 源码分析-高可用 高可用基本是分布式系统必备特性之一，实现方案通常为主从机制。 RocketMQ 的高可用就挺特别，它有主从同步但是没有主从切换，读写分离也并不彻底， 正常情况下所有消费者都是从 master 上拉取消息，只有积压消息超过 master 物理内存的 40%时，消费者切换到 slave 上进行消费，此时其实才是“读写分离...","head":[["meta",{"property":"og:url","content":"https://lament-z.com/docs/message-queue/rocketmq/ha.html"}],["meta",{"property":"og:site_name","content":"鲸鱼气球"}],["meta",{"property":"og:title","content":"RocketMQ 源码分析-高可用 HA"}],["meta",{"property":"og:description","content":"RocketMQ 源码分析-高可用 高可用基本是分布式系统必备特性之一，实现方案通常为主从机制。 RocketMQ 的高可用就挺特别，它有主从同步但是没有主从切换，读写分离也并不彻底， 正常情况下所有消费者都是从 master 上拉取消息，只有积压消息超过 master 物理内存的 40%时，消费者切换到 slave 上进行消费，此时其实才是“读写分离..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T10:52:18.000Z"}],["meta",{"property":"article:author","content":"lament-z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T10:52:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RocketMQ 源码分析-高可用 HA\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-08T10:52:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lament-z\\",\\"url\\":\\"https://lament-z.com\\"}]}"]]},"headers":[{"level":2,"title":"主从同步","slug":"主从同步","link":"#主从同步","children":[{"level":3,"title":"机制概述","slug":"机制概述","link":"#机制概述","children":[]},{"level":3,"title":"HAService","slug":"haservice","link":"#haservice","children":[]},{"level":3,"title":"HAConnection","slug":"haconnection","link":"#haconnection","children":[]}]},{"level":2,"title":"主从切换","slug":"主从切换","link":"#主从切换","children":[]},{"level":2,"title":"元数据同步","slug":"元数据同步","link":"#元数据同步","children":[{"level":3,"title":"Slave 自动同步元数据","slug":"slave-自动同步元数据","link":"#slave-自动同步元数据","children":[]},{"level":3,"title":"消费进度同步","slug":"消费进度同步","link":"#消费进度同步","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1709895138000,"updatedTime":1709895138000,"contributors":[{"name":"Lament","email":"lament.wy@gmail.com","commits":1}]},"readingTime":{"minutes":13.08,"words":3923},"filePathRelative":"docs/message-queue/rocketmq/ha.md","localizedDate":"2024年3月8日","autoDesc":true,"excerpt":"\\n<p>高可用基本是分布式系统必备特性之一，实现方案通常为主从机制。</p>\\n<p>RocketMQ 的高可用就挺特别，它有主从同步但是没有主从切换，读写分离也并不彻底，\\n正常情况下所有消费者都是从 master 上拉取消息，只有积压消息超过 master 物理内存的 40%时，消费者切换到 slave 上进行消费，此时其实才是“读写分离”的。当 slave 上的积压消息小于 30% 时，消费者会再次切换回 master 进行消费。</p>\\n<h2>主从同步</h2>\\n<p>RocketMQ 的主从同步实际上就是 Broker 的主从同步，每当消息送达 Broker-Master 时，要同步到 Broker-Slave，这样一旦 Master 挂了，Consumer 可以从 Slave 拉取消息。</p>"}');export{g as comp,y as data};
