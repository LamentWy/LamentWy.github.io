import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c,a as s,b as n,d as l,e as a}from"./app-BwsoMA_K.js";const i={},r=a(`<h1 id="rocketmq-源码分析-broker" tabindex="-1"><a class="header-anchor" href="#rocketmq-源码分析-broker"><span>RocketMQ 源码分析-Broker</span></a></h1><p>Broker 作为消息队列的核心，它的职责很多，并且与消息生产者、消息消费者、Namesrv、持久化、ACL等均有关系。本篇只简单介绍什么是 Broker，让读者对 Broker 有个大概认识即可，</p><h2 id="broker-概述" tabindex="-1"><a class="header-anchor" href="#broker-概述"><span>Broker 概述</span></a></h2><p>Broker 是 RocketMQ 的核心，它负责消息的传递、消息路由信息的生成、持久化、ACL等等。</p><h2 id="broker-的-pom-xml" tabindex="-1"><a class="header-anchor" href="#broker-的-pom-xml"><span>Broker 的 pom.xml</span></a></h2><p>可以看到作为消息队列的核心模块，Broker 在依赖中引入了相当多的模块，这里只需要知道每个模块大致功能的即可，记不住就分别写上注释。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>懒得一个个点开看，可以直接打印依赖树去看。</p></div><p>通过阅读 <code>pom.xml</code> 我们可以知道 Broker 也是基于 Netty 的（rocketmq-remoting），可以 知道它包含持久化功能 <code>rocketmq-store</code>，它还包含 ACL 功能 <code>rocketmq-acl</code> 等等，这就 不详细罗列了。</p><h2 id="启动类" tabindex="-1"><a class="header-anchor" href="#启动类"><span>启动类</span></a></h2><p>Java 项目找启动类最偷懒的办法就是搜索 <code>main</code> 方法，不过这里我们看文件名就能轻松定位到 <code>BrokerStartup</code>。</p><h3 id="启动流程" tabindex="-1"><a class="header-anchor" href="#启动流程"><span>启动流程</span></a></h3><p><code>BrokerStartup::main</code> --&gt; <code>BrokerStartup::createBrokerController</code> --&gt; <code>BrokerStartup::start</code> --&gt; <code>controller::start</code></p><p>也就是进入 <code>main</code> 方法，然后创建 BrokerController （本质是个 netty server），同时按需初始化一堆东西，最后执行 <code>controller.start()</code>。</p><p>接下来看 Broker 启动时具体做了什么：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// BrokerController::start</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
      <span class="token comment">// 启动持久化</span>
      <span class="token comment">// 这部分在持久化篇展开</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStore <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 启动 netty server</span>
      <span class="token comment">// 持久化涉及到从文件系统恢复消息和消息写入文件系统等，所以要先启动持久化，后启动 netty server</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 启动 netty server</span>
      <span class="token comment">// 与 remotingServer 二选一</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fastRemotingServer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>fastRemotingServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 启动一个守护线程 监控文件列表</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fileWatchService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>fileWatchService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 启动一个 netty client，用于向外部发送请求</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerOuterAPI <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>brokerOuterAPI<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 启动一个守护线程</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestHoldService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestHoldService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 启动一个单线程定时任务</span>
      <span class="token comment">// 同时 clientHousekeepingService 是一个跟 brokerController 绑定的 ChannelEventListener</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientHousekeepingService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>clientHousekeepingService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 同样是启动一个单线程定时任务</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterServerManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>filterServerManager<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 非 DLedger CommitLog</span>
      <span class="token comment">// 也就是高可用模式</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">isEnableDLegerCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">startProcessorByHa</span><span class="token punctuation">(</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 元数据同步</span>
          <span class="token function">handleSlaveSynchronize</span><span class="token punctuation">(</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBrokerAll</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 单线程定时任务，Broker 的信息注册到 NameSrv</span>
      <span class="token comment">// 就是用前面的 brokerOuterAPI (netty client) 给 NameSrv list 发注册请求，默认10秒一次。</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

          <span class="token annotation punctuation">@Override</span>
          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">try</span> <span class="token punctuation">{</span>
                  <span class="token class-name">BrokerController</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBrokerAll</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> brokerConfig<span class="token punctuation">.</span><span class="token function">isForceRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;registerBrokerAll Exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>brokerConfig<span class="token punctuation">.</span><span class="token function">getRegisterNameServerPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


      <span class="token comment">// ignore</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerStatsManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>brokerStatsManager<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 单线程定时任务</span>
      <span class="token comment">// 快速失败模式下，用于清理无效请求</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerFastFailure <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>brokerFastFailure<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以实际上 Broker 的启动就是读取配置，组装好各个组件，然后启动 Netty Server 提供服务。 同时启动一系列定时任务，其他组件，还有一个 netty client 用来与其他服务通信。</p><h3 id="注册到-namesrv-list" tabindex="-1"><a class="header-anchor" href="#注册到-namesrv-list"><span>注册到 NameSrv List</span></a></h3><p>这里顺便看一下 broker 向 NameSrv 注册路由信息。</p><ul><li><p><code>BrokerController::doRegisterBrokerAll</code></p><p>源码略过，可以看到注册流程是：首先组装 <code>topicConfigWrapper</code> 和 Broker 的基本信息(BrokerInfo)，然后使用 <code>brokerOuterAPI::registerBrokerAll</code> 向 namesrv 发注册请求。</p><p>由于 NameSrv 可以是集群，<code>brokerOuterAPI</code> 使用了线程池配合 <code>CountDownLatch</code> 进行批量注册，返回所有注册结果<code>registerBrokerResultList</code>。 <code>BrokerInfo</code> 装入 requestHeader，Topic 信息装入 requestBody，请求类型为 <code>RequestCode.REGISTER_BROKER</code>，通过同步调用<code>invokeSync</code>的方式发起请求，拿到返回结果后解码并本地缓存。</p><p>如果开启了 Broker 的高可用模式，则取出返回结果列表中第一条数据进行高可用模式的后续处理。这里逻辑实际上是反过来的，无论是否开启高可用模式，只要返回列表不为空就取出第一条结果，然后判断是否为高可用模式。</p><p>首先会判断是否为高可用模式，并且要获取到<code>HaServerAddr</code>，满足条件则把 <code>HaServerAddr</code> 更新为 master。之后则是通用处理，其他 slave Broker 把 <code>HaServerAddr</code> 设置为自己的 master broker 的地址。</p><p>最后则是进行“是否为顺序消息模式”的检查和更新。</p><p>至此 NameSrv 中关于 Broker 如何注册的坑就填完了。同时也明确了， Broker 在启动时会把自己的 brokerInfo 和 Topic 信息同时注册到所有 NameSrv 上，并且默认每 10 秒会重新注册一次。由于高可用的相关逻辑也跟注册耦合在一起，因此 master broker 的设置和更新也是随注册触发。</p></li></ul><h3 id="核心功能-接收消息" tabindex="-1"><a class="header-anchor" href="#核心功能-接收消息"><span>核心功能：接收消息</span></a></h3>`,20),u={href:"https://lament-z.com/docs/message-queue/rocketmq/send-msg.html",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="hint-container note"><p class="hint-container-title">注</p><p>涉及持久化的部分略过。</p></div><ul><li><p>定位代码</p><p>对于 Broker 而言，接收客户端发来的消息，自然属于数据输入，再结合大家都基于 netty 进行通信， 那么回顾发送消息的底层代码，我们可以轻松发现这里的数据输入基本就是三种 <code>RequestCode</code>， <code>SEND_MESSAGE</code>，<code>SEND_REPLY_MESSAGE_V2 | SEND_REPLY_MESSAGE</code> （视为一种）， <code>SEND_BATCH_MESSAGE</code>。 也就是单向发送， 需要返回值的发送（包括同步、异步），批量发送。</p><p>broker 接收到 request 后，首先他要对 <code>request</code> 进行解码并提取出 <code>RequestCode</code>，这样才能分辨是什么请求。因此我们去找 Broker 解码的部分。对于 netty 应用而言，解码器在 netty 语境就是一种 Handler，之前 NameSrv 中有提到，RocketMQ 习惯把 handler 都放在 processor 包里，所以可以去 processor 包里找。当然不是所有的 handler 都值得单独创建一个类，你也可以直接利用 IDE 的搜索功能直接在 <code>rocketmq/broker</code> 中搜索对应关键字，比如 <code>SEND_MESSAGE</code> ，简单粗暴。 再比如，RocketMQ 的命名方式， BrokerController，在传统 web 项目里，Controller 里会定义 一堆 <code>RequestMapping</code>，实际上 netty 应用中也可以通过自定义 handler 来实现类似的功能，所以 也可以在 Contoller 里找。</p><p>到这一步就随你喜好了，办法很多，以上几个例子只是抛砖引玉。</p></li></ul><h4 id="sendmessageprocessor" tabindex="-1"><a class="header-anchor" href="#sendmessageprocessor"><span>SendMessageProcessor</span></a></h4><p>启动流程如果有认真看源码的话，在 <code>createBrokerController</code> 那一步中包含 <code>controller.initialize();</code> 这么一个初始化方法，这个初始化方法中有一个步骤就是注册 processor， <code> this.registerProcessor();</code>。</p><p>而这个 <code>registerProcessor()</code> 实际上就是把 <code>RequestCode</code> 和 handler/processor 以及 Executor（线程池）建立对应关系，有点儿类似 web 中的 <code>RequestMapping</code>。</p><p>这里的 handler/processor 使用的是 <code>processor</code> 包下的 <code>SendMessageProcessor</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>sendProcessor<span class="token punctuation">.</span><span class="token function">registerSendMessageHook</span><span class="token punctuation">(</span>sendMessageHookList<span class="token punctuation">)</span><span class="token punctuation">;</span>
sendProcessor<span class="token punctuation">.</span><span class="token function">registerConsumeMessageHook</span><span class="token punctuation">(</span>consumeMessageHookList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从这一段可以看出，无论 Broker 接收到的是生产者的请求还是消费者的请求，都是 <code>SendMessageProcessor</code> 来处理。</p><p>然后来看 <code>SendMessageProcessor::processRequest</code> 方法，它并没有对 <code>request</code> 进行分析， 而是直接传入 <code>asyncProcessRequest()</code>。</p><p><code>asyncProcessRequest()</code>方法中，只对 <code>RequestCode.CONSUMER_SEND_MSG_BACK</code> 一种请求做了区分， 其他的请求直接进入 default 分支，default 分支中也只区分了是否为批量发送，初步印证了之前&quot;发送消息&quot; 中的三种发送消息的方式对于 Broker 来说其实没啥区别。</p><p>这里我们看非批量发送的处理逻辑 <code>asyncSendMessage()</code>，批量消息就是数据解码的时候批量解码然后遍历处理。</p><p><code>asyncSendMessage()</code> 方法比较长，里面混杂了一部分内部消息对象的组装、一部分 request 的解码、 还有 response 的组装等等。</p><p>主要看方法最后那段即可:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// asyncSendMessage()</span>
<span class="token comment">// transFlag 是事务消息的标记 （带这个属性就是事务消息 PROPERTY_TRANSACTION_PREPARED）</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>transFlag <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>transFlag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//broker 未开启事务处理，直接拒绝</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRejectTransactionMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">NO_PERMISSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setRemark</span><span class="token punctuation">(</span>
                <span class="token string">&quot;the broker[&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBrokerIP1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                      <span class="token operator">+</span> <span class="token string">&quot;] sending transaction message is forbidden&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
     <span class="token comment">// 事务消息的处理</span>
    putMessageResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getTransactionalMessageService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncPrepareMessage</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 普通消息的处理</span>
    putMessageResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncPutMessage</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
  <span class="token comment">// 最终返回</span>
 <span class="token keyword">return</span> <span class="token function">handlePutMessageResultFuture</span><span class="token punctuation">(</span>putMessageResult<span class="token punctuation">,</span> response<span class="token punctuation">,</span> request<span class="token punctuation">,</span> msgInner<span class="token punctuation">,</span> responseHeader<span class="token punctuation">,</span> mqtraceContext<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> queueIdInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 Broker 会调用 <code>messageStore::asyncPutMessage()</code> 对消息进行持久化，也就是常说的刷盘。 在<code>asyncPutMessage()</code> 中，实际上真正去存放消息的是 <code>commitLog.asyncPutMessage(msg);</code>， 而 <code>commitLog.asyncPutMessage(msg);</code> 的主要工作首先是将收到的消息写入 <code>mappedFile</code>， 也就是 <code>mappedFile.appendMessage(msg, ...);</code>，之后刷盘 <code>submitFlushRequest(...);</code> 并返回。</p><p>commitLog 这里的源码如果看着迷茫可以先跳过，等讲完持久化章节就很容易理解了，这里面涉及到了 mmap 和 RocketMQ 的文件系统设计，只看代码会很蒙，尤其是这项目木有注释。</p><p>我们接着往下看最后的返回，<code> handlePutMessageResultFuture(...)</code>，方法就是给客户端返回响应的方法，主要工作就是等前面的异步调用都完成之后对 response 进行最后的封装，最终 <code> writeAndFlush</code>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>可以看到，Broker 本质就是一个 Netty Server，一个处理各种请求、返回响应的服务端。它提供/支持的其他功能，比如持久化、高可用等等，都是单独的模块，后面单独去讲。</p>`,19);function d(m,v){const e=o("ExternalLinkIcon");return p(),c("div",null,[r,s("p",null,[n("前面"),s("a",u,[n("发送消息篇"),l(e)]),n(" 里面我们了解了消息是如何发给 Broker 的，这里我们就来看看 Broker 是如何处理消息的。")]),k])}const h=t(i,[["render",d],["__file","broker.html.vue"]]),y=JSON.parse('{"path":"/docs/message-queue/rocketmq/broker.html","title":"RocketMQ 源码分析-Broker","lang":"zh-CN","frontmatter":{"title":"RocketMQ 源码分析-Broker","order":4,"description":"RocketMQ 源码分析-Broker Broker 作为消息队列的核心，它的职责很多，并且与消息生产者、消息消费者、Namesrv、持久化、ACL等均有关系。本篇只简单介绍什么是 Broker，让读者对 Broker 有个大概认识即可， Broker 概述 Broker 是 RocketMQ 的核心，它负责消息的传递、消息路由信息的生成、持久化、A...","head":[["meta",{"property":"og:url","content":"https://lament-z.com/docs/message-queue/rocketmq/broker.html"}],["meta",{"property":"og:site_name","content":"鲸鱼气球"}],["meta",{"property":"og:title","content":"RocketMQ 源码分析-Broker"}],["meta",{"property":"og:description","content":"RocketMQ 源码分析-Broker Broker 作为消息队列的核心，它的职责很多，并且与消息生产者、消息消费者、Namesrv、持久化、ACL等均有关系。本篇只简单介绍什么是 Broker，让读者对 Broker 有个大概认识即可， Broker 概述 Broker 是 RocketMQ 的核心，它负责消息的传递、消息路由信息的生成、持久化、A..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T11:25:20.000Z"}],["meta",{"property":"article:author","content":"lament-z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T11:25:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RocketMQ 源码分析-Broker\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-08T11:25:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lament-z\\",\\"url\\":\\"https://lament-z.com\\"}]}"]]},"headers":[{"level":2,"title":"Broker 概述","slug":"broker-概述","link":"#broker-概述","children":[]},{"level":2,"title":"Broker 的 pom.xml","slug":"broker-的-pom-xml","link":"#broker-的-pom-xml","children":[]},{"level":2,"title":"启动类","slug":"启动类","link":"#启动类","children":[{"level":3,"title":"启动流程","slug":"启动流程","link":"#启动流程","children":[]},{"level":3,"title":"注册到 NameSrv List","slug":"注册到-namesrv-list","link":"#注册到-namesrv-list","children":[]},{"level":3,"title":"核心功能：接收消息","slug":"核心功能-接收消息","link":"#核心功能-接收消息","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1709897120000,"updatedTime":1709897120000,"contributors":[{"name":"Lament","email":"lament.wy@gmail.com","commits":1}]},"readingTime":{"minutes":7.43,"words":2230},"filePathRelative":"docs/message-queue/rocketmq/broker.md","localizedDate":"2024年3月8日","autoDesc":true,"excerpt":"\\n<p>Broker 作为消息队列的核心，它的职责很多，并且与消息生产者、消息消费者、Namesrv、持久化、ACL等均有关系。本篇只简单介绍什么是 Broker，让读者对 Broker 有个大概认识即可，</p>\\n<h2>Broker 概述</h2>\\n<p>Broker 是 RocketMQ 的核心，它负责消息的传递、消息路由信息的生成、持久化、ACL等等。</p>\\n<h2>Broker 的 pom.xml</h2>\\n<p>可以看到作为消息队列的核心模块，Broker 在依赖中引入了相当多的模块，这里只需要知道每个模块大致功能的即可，记不住就分别写上注释。</p>\\n<div class=\\"hint-container note\\">\\n<p class=\\"hint-container-title\\">注</p>\\n<p>懒得一个个点开看，可以直接打印依赖树去看。</p>\\n</div>"}');export{h as comp,y as data};
